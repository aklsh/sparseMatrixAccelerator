-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HLS_CISR_spmv_accel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cmd_start : IN STD_LOGIC_VECTOR (0 downto 0);
    inp_vec_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    inp_vec_ce0 : OUT STD_LOGIC;
    inp_vec_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    slot_data_arr_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    slot_data_arr_ce0 : OUT STD_LOGIC;
    slot_data_arr_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    slot_arr_row_len_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    slot_arr_row_len_ce0 : OUT STD_LOGIC;
    slot_arr_row_len_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_vec_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_vec_ce0 : OUT STD_LOGIC;
    output_vec_we0 : OUT STD_LOGIC;
    output_vec_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of HLS_CISR_spmv_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "HLS_CISR_spmv_accel_HLS_CISR_spmv_accel,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=12.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.024000,HLS_SYN_LAT=28,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1290,HLS_SYN_LUT=2010,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal max_row_id : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal row_len_slot_arr_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_len_slot_arr_ce0 : STD_LOGIC;
    signal row_len_slot_arr_we0 : STD_LOGIC;
    signal row_len_slot_arr_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_len_slot_arr_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_len_slot_arr_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_len_slot_arr_ce1 : STD_LOGIC;
    signal row_len_slot_arr_we1 : STD_LOGIC;
    signal row_len_slot_arr_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slot_counter_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_counter_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_counter_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_counter_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_counter_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_counter_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_counter_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_counter_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_len_id_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_len_id_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_len_id_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_len_id_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_res_arr_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_res_arr_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_res_arr_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_res_arr_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_id_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal slot_row_id_1 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal slot_row_id_2 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal slot_row_id_3 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal slot_id2_reg_376 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal cmd_start_read_read_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_fu_461_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln68_fu_715_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln68_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln86_fu_727_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln86_reg_1176 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln80_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_1180 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln107_fu_948_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln107_reg_1194 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal matrix_val_fu_957_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal bitcast_ln111_fu_961_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln107_1_fu_966_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln107_1_reg_1219 : STD_LOGIC_VECTOR (31 downto 0);
    signal matrix_val_1_fu_975_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal bitcast_ln111_1_fu_979_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln107_2_fu_984_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln107_2_reg_1244 : STD_LOGIC_VECTOR (31 downto 0);
    signal matrix_val_2_fu_993_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal bitcast_ln111_2_fu_997_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln107_3_fu_1002_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln107_3_reg_1269 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_391_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_reg_1279 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal matrix_val_3_fu_1011_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln111_3_fu_1015_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_i_reg_1297 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal mul_2_i_reg_1305 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal mul_3_i_reg_1313 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal slot_id_reg_365 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln26_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln37_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_492_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_fu_605_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln58_1_fu_636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_2_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_3_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln86_fu_797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln111_fu_952_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln111_1_fu_970_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln111_2_fu_988_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln111_3_fu_1006_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln131_fu_1050_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln131_1_fu_1070_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln131_2_fu_1090_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln131_3_fu_1110_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal add_ln92_fu_864_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln59_fu_610_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln29_fu_501_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln59_1_fu_641_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln59_2_fu_672_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln59_3_fu_703_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln115_fu_900_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_slot_row_counter_0_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_fu_425_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln115_1_fu_912_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_slot_row_counter_1_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln115_2_fu_924_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_slot_row_counter_2_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_fu_433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln115_3_fu_936_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_slot_row_counter_3_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln87_fu_802_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal trunc_ln91_fu_836_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal bitcast_ln131_fu_1055_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln131_1_fu_1075_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln131_2_fu_1095_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln131_3_fu_1115_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_387_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_387_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_391_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_391_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_473_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln37_fu_486_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln58_fu_626_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln58_fu_630_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln58_1_fu_657_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln58_fu_661_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln58_2_fu_688_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln58_1_fu_692_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_737_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_773_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln68_fu_731_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln86_1_fu_787_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln86_fu_791_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_441_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component HLS_CISR_spmv_accel_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HLS_CISR_spmv_accel_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HLS_CISR_spmv_accel_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HLS_CISR_spmv_accel_row_len_slot_arr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    row_len_slot_arr_U : component HLS_CISR_spmv_accel_row_len_slot_arr
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row_len_slot_arr_address0,
        ce0 => row_len_slot_arr_ce0,
        we0 => row_len_slot_arr_we0,
        d0 => row_len_slot_arr_d0,
        q0 => row_len_slot_arr_q0,
        address1 => row_len_slot_arr_address1,
        ce1 => row_len_slot_arr_ce1,
        we1 => row_len_slot_arr_we1,
        d1 => row_len_slot_arr_d1);

    fadd_32ns_32ns_32_5_full_dsp_1_U1 : component HLS_CISR_spmv_accel_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_387_p0,
        din1 => grp_fu_387_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_387_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U2 : component HLS_CISR_spmv_accel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_391_p0,
        din1 => grp_fu_391_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_391_p2);

    mux_42_32_1_1_U3 : component HLS_CISR_spmv_accel_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => grp_load_fu_425_p1,
        din1 => grp_load_fu_429_p1,
        din2 => grp_load_fu_433_p1,
        din3 => grp_load_fu_437_p1,
        din4 => trunc_ln86_fu_727_p1,
        dout => tmp_fu_737_p6);

    mux_42_32_1_1_U4 : component HLS_CISR_spmv_accel_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => slot_row_len_id_0,
        din1 => slot_row_len_id_1,
        din2 => slot_row_len_id_2,
        din3 => slot_row_len_id_3,
        din4 => trunc_ln86_fu_727_p1,
        dout => tmp_1_fu_773_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state8);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    max_row_id_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (cmd_start_read_read_fu_134_p2 = ap_const_lv1_1))) then 
                max_row_id <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln80_fu_751_p2 = ap_const_lv1_1) and (icmp_ln68_fu_721_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                max_row_id <= add_ln92_fu_864_p2;
            end if; 
        end if;
    end process;

    slot_counter_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_501_p1 = ap_const_lv2_0) and (icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_counter_0 <= ap_const_lv32_0;
            elsif (((grp_fu_419_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                slot_counter_0 <= add_ln59_fu_610_p2;
            end if; 
        end if;
    end process;

    slot_counter_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_501_p1 = ap_const_lv2_1) and (icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_counter_1 <= ap_const_lv32_0;
            elsif (((grp_fu_419_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                slot_counter_1 <= add_ln59_1_fu_641_p2;
            end if; 
        end if;
    end process;

    slot_counter_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_501_p1 = ap_const_lv2_2) and (icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_counter_2 <= ap_const_lv32_0;
            elsif (((grp_fu_419_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                slot_counter_2 <= add_ln59_2_fu_672_p2;
            end if; 
        end if;
    end process;

    slot_counter_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_501_p1 = ap_const_lv2_3) and (icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_counter_3 <= ap_const_lv32_0;
            elsif (((grp_fu_419_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                slot_counter_3 <= add_ln59_3_fu_703_p2;
            end if; 
        end if;
    end process;

    slot_id2_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                slot_id2_reg_376 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln68_fu_721_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                slot_id2_reg_376 <= add_ln68_fu_715_p2;
            end if; 
        end if;
    end process;

    slot_id_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (cmd_start_read_read_fu_134_p2 = ap_const_lv1_1))) then 
                slot_id_reg_365 <= ap_const_lv3_0;
            elsif (((icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_id_reg_365 <= add_ln26_fu_461_p2;
            end if; 
        end if;
    end process;

    slot_res_arr_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((trunc_ln29_fu_501_p1 = ap_const_lv2_0) and (icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln80_fu_751_p2 = ap_const_lv1_1) and (trunc_ln86_fu_727_p1 = ap_const_lv2_0) and (icmp_ln68_fu_721_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
                slot_res_arr_0 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                slot_res_arr_0 <= reg_451;
            end if; 
        end if;
    end process;

    slot_res_arr_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((trunc_ln29_fu_501_p1 = ap_const_lv2_1) and (icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln80_fu_751_p2 = ap_const_lv1_1) and (trunc_ln86_fu_727_p1 = ap_const_lv2_1) and (icmp_ln68_fu_721_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
                slot_res_arr_1 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                slot_res_arr_1 <= reg_451;
            end if; 
        end if;
    end process;

    slot_res_arr_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((trunc_ln29_fu_501_p1 = ap_const_lv2_2) and (icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln80_fu_751_p2 = ap_const_lv1_1) and (trunc_ln86_fu_727_p1 = ap_const_lv2_2) and (icmp_ln68_fu_721_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
                slot_res_arr_2 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                slot_res_arr_2 <= reg_451;
            end if; 
        end if;
    end process;

    slot_res_arr_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((trunc_ln29_fu_501_p1 = ap_const_lv2_3) and (icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln80_fu_751_p2 = ap_const_lv1_1) and (trunc_ln86_fu_727_p1 = ap_const_lv2_3) and (icmp_ln68_fu_721_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
                slot_res_arr_3 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                slot_res_arr_3 <= reg_451;
            end if; 
        end if;
    end process;

    slot_row_counter_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_501_p1 = ap_const_lv2_0) and (icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_row_counter_0 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln80_reg_1180 = ap_const_lv1_1) and (trunc_ln86_reg_1176 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                slot_row_counter_0 <= row_len_slot_arr_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                slot_row_counter_0 <= add_ln115_fu_900_p2;
            end if; 
        end if;
    end process;

    slot_row_counter_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_501_p1 = ap_const_lv2_1) and (icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_row_counter_1 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln80_reg_1180 = ap_const_lv1_1) and (trunc_ln86_reg_1176 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                slot_row_counter_1 <= row_len_slot_arr_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                slot_row_counter_1 <= add_ln115_1_fu_912_p2;
            end if; 
        end if;
    end process;

    slot_row_counter_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_501_p1 = ap_const_lv2_2) and (icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_row_counter_2 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln80_reg_1180 = ap_const_lv1_1) and (trunc_ln86_reg_1176 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                slot_row_counter_2 <= row_len_slot_arr_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                slot_row_counter_2 <= add_ln115_2_fu_924_p2;
            end if; 
        end if;
    end process;

    slot_row_counter_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_501_p1 = ap_const_lv2_3) and (icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_row_counter_3 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln80_reg_1180 = ap_const_lv1_1) and (trunc_ln86_reg_1176 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                slot_row_counter_3 <= row_len_slot_arr_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                slot_row_counter_3 <= add_ln115_3_fu_936_p2;
            end if; 
        end if;
    end process;

    slot_row_id_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_501_p1 = ap_const_lv2_0) and (icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_row_id_0 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln80_fu_751_p2 = ap_const_lv1_1) and (trunc_ln86_fu_727_p1 = ap_const_lv2_0) and (icmp_ln68_fu_721_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                slot_row_id_0 <= trunc_ln91_fu_836_p1;
            end if; 
        end if;
    end process;

    slot_row_id_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_501_p1 = ap_const_lv2_1) and (icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_row_id_1 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln80_fu_751_p2 = ap_const_lv1_1) and (trunc_ln86_fu_727_p1 = ap_const_lv2_1) and (icmp_ln68_fu_721_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                slot_row_id_1 <= trunc_ln91_fu_836_p1;
            end if; 
        end if;
    end process;

    slot_row_id_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_501_p1 = ap_const_lv2_2) and (icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_row_id_2 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln80_fu_751_p2 = ap_const_lv1_1) and (trunc_ln86_fu_727_p1 = ap_const_lv2_2) and (icmp_ln68_fu_721_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                slot_row_id_2 <= trunc_ln91_fu_836_p1;
            end if; 
        end if;
    end process;

    slot_row_id_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_501_p1 = ap_const_lv2_3) and (icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_row_id_3 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln80_fu_751_p2 = ap_const_lv1_1) and (trunc_ln86_fu_727_p1 = ap_const_lv2_3) and (icmp_ln68_fu_721_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                slot_row_id_3 <= trunc_ln91_fu_836_p1;
            end if; 
        end if;
    end process;

    slot_row_len_id_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_501_p1 = ap_const_lv2_0) and (icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_row_len_id_0 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln80_fu_751_p2 = ap_const_lv1_1) and (trunc_ln86_fu_727_p1 = ap_const_lv2_0) and (icmp_ln68_fu_721_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                slot_row_len_id_0 <= add_ln87_fu_802_p2;
            end if; 
        end if;
    end process;

    slot_row_len_id_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_501_p1 = ap_const_lv2_1) and (icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_row_len_id_1 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln80_fu_751_p2 = ap_const_lv1_1) and (trunc_ln86_fu_727_p1 = ap_const_lv2_1) and (icmp_ln68_fu_721_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                slot_row_len_id_1 <= add_ln87_fu_802_p2;
            end if; 
        end if;
    end process;

    slot_row_len_id_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_501_p1 = ap_const_lv2_2) and (icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_row_len_id_2 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln80_fu_751_p2 = ap_const_lv1_1) and (trunc_ln86_fu_727_p1 = ap_const_lv2_2) and (icmp_ln68_fu_721_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                slot_row_len_id_2 <= add_ln87_fu_802_p2;
            end if; 
        end if;
    end process;

    slot_row_len_id_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_501_p1 = ap_const_lv2_3) and (icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_row_len_id_3 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln80_fu_751_p2 = ap_const_lv1_1) and (trunc_ln86_fu_727_p1 = ap_const_lv2_3) and (icmp_ln68_fu_721_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                slot_row_len_id_3 <= add_ln87_fu_802_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln68_fu_721_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln80_reg_1180 <= icmp_ln80_fu_751_p2;
                trunc_ln86_reg_1176 <= trunc_ln86_fu_727_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                mul_1_i_reg_1297 <= grp_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                mul_2_i_reg_1305 <= grp_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                mul_3_i_reg_1313 <= grp_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                mul_i_reg_1279 <= grp_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then
                reg_451 <= grp_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                trunc_ln107_1_reg_1219 <= trunc_ln107_1_fu_966_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                trunc_ln107_2_reg_1244 <= trunc_ln107_2_fu_984_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                trunc_ln107_3_reg_1269 <= trunc_ln107_3_fu_1002_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                trunc_ln107_reg_1194 <= trunc_ln107_fu_948_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, cmd_start_read_read_fu_134_p2, ap_CS_fsm_state2, ap_enable_reg_pp1_iter0, icmp_ln68_fu_721_p2, ap_block_pp1_stage0_subdone, icmp_ln26_fu_467_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (cmd_start_read_read_fu_134_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (cmd_start_read_read_fu_134_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln68_fu_721_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln68_fu_721_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln115_1_fu_912_p2 <= std_logic_vector(unsigned(grp_load_fu_429_p1) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln115_2_fu_924_p2 <= std_logic_vector(unsigned(grp_load_fu_433_p1) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln115_3_fu_936_p2 <= std_logic_vector(unsigned(grp_load_fu_437_p1) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln115_fu_900_p2 <= std_logic_vector(unsigned(grp_load_fu_425_p1) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln26_fu_461_p2 <= std_logic_vector(unsigned(slot_id_reg_365) + unsigned(ap_const_lv3_1));
    add_ln58_1_fu_692_p2 <= std_logic_vector(unsigned(trunc_ln58_2_fu_688_p1) + unsigned(ap_const_lv3_6));
    add_ln58_fu_630_p2 <= std_logic_vector(unsigned(trunc_ln58_fu_626_p1) + unsigned(ap_const_lv3_2));
    add_ln59_1_fu_641_p2 <= std_logic_vector(unsigned(slot_counter_1) + unsigned(ap_const_lv32_1));
    add_ln59_2_fu_672_p2 <= std_logic_vector(unsigned(slot_counter_2) + unsigned(ap_const_lv32_1));
    add_ln59_3_fu_703_p2 <= std_logic_vector(unsigned(slot_counter_3) + unsigned(ap_const_lv32_1));
    add_ln59_fu_610_p2 <= std_logic_vector(unsigned(slot_counter_0) + unsigned(ap_const_lv32_1));
    add_ln68_fu_715_p2 <= std_logic_vector(unsigned(slot_id2_reg_376) + unsigned(ap_const_lv3_1));
    add_ln86_fu_791_p2 <= std_logic_vector(unsigned(shl_ln68_fu_731_p2) + unsigned(trunc_ln86_1_fu_787_p1));
    add_ln87_fu_802_p2 <= std_logic_vector(unsigned(tmp_1_fu_773_p6) + unsigned(ap_const_lv32_1));
    add_ln92_fu_864_p2 <= std_logic_vector(unsigned(max_row_id) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state21 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(20);
    ap_CS_fsm_state23 <= ap_CS_fsm(21);
    ap_CS_fsm_state24 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state8_assign_proc : process(icmp_ln68_fu_721_p2)
    begin
        if ((icmp_ln68_fu_721_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_slot_row_counter_0_load_1_assign_proc : process(row_len_slot_arr_q0, slot_row_counter_0, ap_CS_fsm_pp1_stage0, trunc_ln86_reg_1176, icmp_ln80_reg_1180, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln80_reg_1180 = ap_const_lv1_1) and (trunc_ln86_reg_1176 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_sig_allocacmp_slot_row_counter_0_load_1 <= row_len_slot_arr_q0;
        else 
            ap_sig_allocacmp_slot_row_counter_0_load_1 <= slot_row_counter_0;
        end if; 
    end process;


    ap_sig_allocacmp_slot_row_counter_1_load_1_assign_proc : process(row_len_slot_arr_q0, slot_row_counter_1, ap_CS_fsm_pp1_stage0, trunc_ln86_reg_1176, icmp_ln80_reg_1180, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln80_reg_1180 = ap_const_lv1_1) and (trunc_ln86_reg_1176 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_sig_allocacmp_slot_row_counter_1_load_1 <= row_len_slot_arr_q0;
        else 
            ap_sig_allocacmp_slot_row_counter_1_load_1 <= slot_row_counter_1;
        end if; 
    end process;


    ap_sig_allocacmp_slot_row_counter_2_load_1_assign_proc : process(row_len_slot_arr_q0, slot_row_counter_2, ap_CS_fsm_pp1_stage0, trunc_ln86_reg_1176, icmp_ln80_reg_1180, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln80_reg_1180 = ap_const_lv1_1) and (trunc_ln86_reg_1176 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_sig_allocacmp_slot_row_counter_2_load_1 <= row_len_slot_arr_q0;
        else 
            ap_sig_allocacmp_slot_row_counter_2_load_1 <= slot_row_counter_2;
        end if; 
    end process;


    ap_sig_allocacmp_slot_row_counter_3_load_1_assign_proc : process(row_len_slot_arr_q0, slot_row_counter_3, ap_CS_fsm_pp1_stage0, trunc_ln86_reg_1176, icmp_ln80_reg_1180, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln80_reg_1180 = ap_const_lv1_1) and (trunc_ln86_reg_1176 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_sig_allocacmp_slot_row_counter_3_load_1 <= row_len_slot_arr_q0;
        else 
            ap_sig_allocacmp_slot_row_counter_3_load_1 <= slot_row_counter_3;
        end if; 
    end process;

    bitcast_ln111_1_fu_979_p1 <= inp_vec_q0;
    bitcast_ln111_2_fu_997_p1 <= inp_vec_q0;
    bitcast_ln111_3_fu_1015_p1 <= inp_vec_q0;
    bitcast_ln111_fu_961_p1 <= inp_vec_q0;
    bitcast_ln131_1_fu_1075_p1 <= reg_451;
    bitcast_ln131_2_fu_1095_p1 <= reg_451;
    bitcast_ln131_3_fu_1115_p1 <= reg_451;
    bitcast_ln131_fu_1055_p1 <= reg_451;
    cmd_start_read_read_fu_134_p2 <= cmd_start;

    grp_fu_387_p0_assign_proc : process(slot_res_arr_0, slot_res_arr_1, slot_res_arr_2, slot_res_arr_3, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_387_p0 <= slot_res_arr_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_387_p0 <= slot_res_arr_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_387_p0 <= slot_res_arr_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_387_p0 <= slot_res_arr_0;
        else 
            grp_fu_387_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_387_p1_assign_proc : process(mul_i_reg_1279, mul_1_i_reg_1297, ap_CS_fsm_state16, mul_2_i_reg_1305, ap_CS_fsm_state17, mul_3_i_reg_1313, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_387_p1 <= mul_3_i_reg_1313;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_387_p1 <= mul_2_i_reg_1305;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_387_p1 <= mul_1_i_reg_1297;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_387_p1 <= mul_i_reg_1279;
        else 
            grp_fu_387_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_391_p0_assign_proc : process(matrix_val_fu_957_p1, ap_CS_fsm_state12, matrix_val_1_fu_975_p1, ap_CS_fsm_state13, matrix_val_2_fu_993_p1, ap_CS_fsm_state14, ap_CS_fsm_state15, matrix_val_3_fu_1011_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_391_p0 <= matrix_val_3_fu_1011_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_391_p0 <= matrix_val_2_fu_993_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_391_p0 <= matrix_val_1_fu_975_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_391_p0 <= matrix_val_fu_957_p1;
        else 
            grp_fu_391_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_391_p1_assign_proc : process(ap_CS_fsm_state12, bitcast_ln111_fu_961_p1, ap_CS_fsm_state13, bitcast_ln111_1_fu_979_p1, ap_CS_fsm_state14, bitcast_ln111_2_fu_997_p1, ap_CS_fsm_state15, bitcast_ln111_3_fu_1015_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_391_p1 <= bitcast_ln111_3_fu_1015_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_391_p1 <= bitcast_ln111_2_fu_997_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_391_p1 <= bitcast_ln111_1_fu_979_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_391_p1 <= bitcast_ln111_fu_961_p1;
        else 
            grp_fu_391_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_419_p2 <= "1" when (slot_arr_row_len_q0 = ap_const_lv32_FFFFFFFF) else "0";
    grp_fu_441_p4 <= slot_data_arr_q0(34 downto 32);

    grp_load_fu_425_p1_assign_proc : process(slot_row_counter_0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln68_fu_721_p2, ap_CS_fsm_state10, ap_block_pp1_stage0, ap_sig_allocacmp_slot_row_counter_0_load_1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_load_fu_425_p1 <= slot_row_counter_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln68_fu_721_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            grp_load_fu_425_p1 <= ap_sig_allocacmp_slot_row_counter_0_load_1;
        else 
            grp_load_fu_425_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_load_fu_429_p1_assign_proc : process(slot_row_counter_1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln68_fu_721_p2, ap_CS_fsm_state10, ap_block_pp1_stage0, ap_sig_allocacmp_slot_row_counter_1_load_1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_load_fu_429_p1 <= slot_row_counter_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln68_fu_721_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            grp_load_fu_429_p1 <= ap_sig_allocacmp_slot_row_counter_1_load_1;
        else 
            grp_load_fu_429_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_load_fu_433_p1_assign_proc : process(slot_row_counter_2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln68_fu_721_p2, ap_CS_fsm_state10, ap_block_pp1_stage0, ap_sig_allocacmp_slot_row_counter_2_load_1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_load_fu_433_p1 <= slot_row_counter_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln68_fu_721_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            grp_load_fu_433_p1 <= ap_sig_allocacmp_slot_row_counter_2_load_1;
        else 
            grp_load_fu_433_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_load_fu_437_p1_assign_proc : process(slot_row_counter_3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln68_fu_721_p2, ap_CS_fsm_state10, ap_block_pp1_stage0, ap_sig_allocacmp_slot_row_counter_3_load_1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_load_fu_437_p1 <= slot_row_counter_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln68_fu_721_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            grp_load_fu_437_p1 <= ap_sig_allocacmp_slot_row_counter_3_load_1;
        else 
            grp_load_fu_437_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln26_fu_467_p2 <= "1" when (slot_id_reg_365 = ap_const_lv3_4) else "0";
    icmp_ln68_fu_721_p2 <= "1" when (slot_id2_reg_376 = ap_const_lv3_4) else "0";
    icmp_ln80_fu_751_p2 <= "1" when (tmp_fu_737_p6 = ap_const_lv32_0) else "0";

    inp_vec_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, zext_ln111_fu_952_p1, zext_ln111_1_fu_970_p1, zext_ln111_2_fu_988_p1, zext_ln111_3_fu_1006_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            inp_vec_address0 <= zext_ln111_3_fu_1006_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            inp_vec_address0 <= zext_ln111_2_fu_988_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            inp_vec_address0 <= zext_ln111_1_fu_970_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            inp_vec_address0 <= zext_ln111_fu_952_p1(3 - 1 downto 0);
        else 
            inp_vec_address0 <= "XXX";
        end if; 
    end process;


    inp_vec_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            inp_vec_ce0 <= ap_const_logic_1;
        else 
            inp_vec_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    matrix_val_1_fu_975_p1 <= trunc_ln107_1_reg_1219;
    matrix_val_2_fu_993_p1 <= trunc_ln107_2_reg_1244;
    matrix_val_3_fu_1011_p1 <= trunc_ln107_3_reg_1269;
    matrix_val_fu_957_p1 <= trunc_ln107_reg_1194;
    or_ln37_fu_486_p2 <= (tmp_2_fu_473_p3 or ap_const_lv4_1);

    output_vec_address0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, zext_ln131_fu_1050_p1, zext_ln131_1_fu_1070_p1, zext_ln131_2_fu_1090_p1, zext_ln131_3_fu_1110_p1, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_vec_address0 <= zext_ln131_3_fu_1110_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_vec_address0 <= zext_ln131_2_fu_1090_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            output_vec_address0 <= zext_ln131_1_fu_1070_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_vec_address0 <= zext_ln131_fu_1050_p1(3 - 1 downto 0);
        else 
            output_vec_address0 <= "XXX";
        end if; 
    end process;


    output_vec_ce0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            output_vec_ce0 <= ap_const_logic_1;
        else 
            output_vec_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_vec_d0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, bitcast_ln131_fu_1055_p1, bitcast_ln131_1_fu_1075_p1, bitcast_ln131_2_fu_1095_p1, bitcast_ln131_3_fu_1115_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_vec_d0 <= bitcast_ln131_3_fu_1115_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_vec_d0 <= bitcast_ln131_2_fu_1095_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            output_vec_d0 <= bitcast_ln131_1_fu_1075_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_vec_d0 <= bitcast_ln131_fu_1055_p1;
        else 
            output_vec_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_vec_we0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            output_vec_we0 <= ap_const_logic_1;
        else 
            output_vec_we0 <= ap_const_logic_0;
        end if; 
    end process;


    row_len_slot_arr_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, tmp_3_fu_492_p3, zext_ln58_fu_605_p1, zext_ln58_2_fu_667_p1, zext_ln86_fu_797_p1, ap_block_pp1_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            row_len_slot_arr_address0 <= zext_ln86_fu_797_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            row_len_slot_arr_address0 <= zext_ln58_2_fu_667_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            row_len_slot_arr_address0 <= zext_ln58_fu_605_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            row_len_slot_arr_address0 <= tmp_3_fu_492_p3(3 - 1 downto 0);
        else 
            row_len_slot_arr_address0 <= "XXX";
        end if; 
    end process;


    row_len_slot_arr_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state7, zext_ln37_fu_481_p1, zext_ln58_1_fu_636_p1, zext_ln58_3_fu_698_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            row_len_slot_arr_address1 <= zext_ln58_3_fu_698_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            row_len_slot_arr_address1 <= zext_ln58_1_fu_636_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            row_len_slot_arr_address1 <= zext_ln37_fu_481_p1(3 - 1 downto 0);
        else 
            row_len_slot_arr_address1 <= "XXX";
        end if; 
    end process;


    row_len_slot_arr_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            row_len_slot_arr_ce0 <= ap_const_logic_1;
        else 
            row_len_slot_arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_len_slot_arr_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            row_len_slot_arr_ce1 <= ap_const_logic_1;
        else 
            row_len_slot_arr_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    row_len_slot_arr_d0_assign_proc : process(slot_arr_row_len_q0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            row_len_slot_arr_d0 <= slot_arr_row_len_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            row_len_slot_arr_d0 <= ap_const_lv32_0;
        else 
            row_len_slot_arr_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    row_len_slot_arr_d1_assign_proc : process(slot_arr_row_len_q0, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            row_len_slot_arr_d1 <= slot_arr_row_len_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            row_len_slot_arr_d1 <= ap_const_lv32_0;
        else 
            row_len_slot_arr_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    row_len_slot_arr_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, icmp_ln26_fu_467_p2, grp_fu_419_p2)
    begin
        if ((((grp_fu_419_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((grp_fu_419_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            row_len_slot_arr_we0 <= ap_const_logic_1;
        else 
            row_len_slot_arr_we0 <= ap_const_logic_0;
        end if; 
    end process;


    row_len_slot_arr_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state7, icmp_ln26_fu_467_p2, grp_fu_419_p2)
    begin
        if ((((grp_fu_419_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((grp_fu_419_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln26_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            row_len_slot_arr_we1 <= ap_const_logic_1;
        else 
            row_len_slot_arr_we1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln68_fu_731_p2 <= std_logic_vector(shift_left(unsigned(slot_id2_reg_376),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));

    slot_arr_row_len_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            slot_arr_row_len_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            slot_arr_row_len_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            slot_arr_row_len_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            slot_arr_row_len_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            slot_arr_row_len_address0 <= "XX";
        end if; 
    end process;


    slot_arr_row_len_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            slot_arr_row_len_ce0 <= ap_const_logic_1;
        else 
            slot_arr_row_len_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    slot_data_arr_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            slot_data_arr_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            slot_data_arr_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            slot_data_arr_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            slot_data_arr_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            slot_data_arr_address0 <= "XX";
        end if; 
    end process;


    slot_data_arr_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            slot_data_arr_ce0 <= ap_const_logic_1;
        else 
            slot_data_arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_473_p3 <= (slot_id_reg_365 & ap_const_lv1_0);
    tmp_3_fu_492_p3 <= (ap_const_lv60_0 & or_ln37_fu_486_p2);
    trunc_ln107_1_fu_966_p1 <= slot_data_arr_q0(32 - 1 downto 0);
    trunc_ln107_2_fu_984_p1 <= slot_data_arr_q0(32 - 1 downto 0);
    trunc_ln107_3_fu_1002_p1 <= slot_data_arr_q0(32 - 1 downto 0);
    trunc_ln107_fu_948_p1 <= slot_data_arr_q0(32 - 1 downto 0);
    trunc_ln29_fu_501_p1 <= slot_id_reg_365(2 - 1 downto 0);
    trunc_ln58_1_fu_657_p1 <= slot_counter_2(3 - 1 downto 0);
    trunc_ln58_2_fu_688_p1 <= slot_counter_3(3 - 1 downto 0);
    trunc_ln58_fu_626_p1 <= slot_counter_1(3 - 1 downto 0);
    trunc_ln86_1_fu_787_p1 <= tmp_1_fu_773_p6(3 - 1 downto 0);
    trunc_ln86_fu_727_p1 <= slot_id2_reg_376(2 - 1 downto 0);
    trunc_ln91_fu_836_p1 <= max_row_id(3 - 1 downto 0);
    xor_ln58_fu_661_p2 <= (trunc_ln58_1_fu_657_p1 xor ap_const_lv3_4);
    zext_ln111_1_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_441_p4),64));
    zext_ln111_2_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_441_p4),64));
    zext_ln111_3_fu_1006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_441_p4),64));
    zext_ln111_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_441_p4),64));
    zext_ln131_1_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(slot_row_id_1),64));
    zext_ln131_2_fu_1090_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(slot_row_id_2),64));
    zext_ln131_3_fu_1110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(slot_row_id_3),64));
    zext_ln131_fu_1050_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(slot_row_id_0),64));
    zext_ln37_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_473_p3),64));
    zext_ln58_1_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln58_fu_630_p2),64));
    zext_ln58_2_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln58_fu_661_p2),64));
    zext_ln58_3_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln58_1_fu_692_p2),64));
    zext_ln58_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(slot_counter_0),64));
    zext_ln86_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln86_fu_791_p2),64));
end behav;
