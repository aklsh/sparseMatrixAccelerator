-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HLS_CISR_spmv_accel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cmd_start : IN STD_LOGIC_VECTOR (0 downto 0);
    inp_vec_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    inp_vec_ce0 : OUT STD_LOGIC;
    inp_vec_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    slot_data_arr_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    slot_data_arr_ce0 : OUT STD_LOGIC;
    slot_data_arr_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    slot_arr_row_len_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    slot_arr_row_len_ce0 : OUT STD_LOGIC;
    slot_arr_row_len_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_vec_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_vec_ce0 : OUT STD_LOGIC;
    output_vec_we0 : OUT STD_LOGIC;
    output_vec_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of HLS_CISR_spmv_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "HLS_CISR_spmv_accel_HLS_CISR_spmv_accel,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=25,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=936,HLS_SYN_LUT=1627,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal max_row_id : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal row_len_slot_arr_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_len_slot_arr_ce0 : STD_LOGIC;
    signal row_len_slot_arr_we0 : STD_LOGIC;
    signal row_len_slot_arr_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_len_slot_arr_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_len_slot_arr_ce1 : STD_LOGIC;
    signal row_len_slot_arr_we1 : STD_LOGIC;
    signal row_len_slot_arr_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slot_counter_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_counter_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_counter_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_counter_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_len_id_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_len_id_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_res_arr_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_res_arr_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_id_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal slot_row_id_1 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal slot_id1_reg_259 : STD_LOGIC_VECTOR (1 downto 0);
    signal slot_id2_reg_270 : STD_LOGIC_VECTOR (1 downto 0);
    signal reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_323 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal cmd_start_read_read_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_fu_333_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln25_reg_782 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal row_len_slot_arr_addr_5_reg_790 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln25_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_len_slot_arr_addr_3_reg_795 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln49_fu_455_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln49_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln58_fu_472_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln58_reg_812 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln68_fu_537_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln68_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln86_fu_549_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln86_reg_835 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_839 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln107_fu_692_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln107_reg_853 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal trunc_ln107_1_fu_701_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln107_1_reg_868 : STD_LOGIC_VECTOR (31 downto 0);
    signal matrix_val_fu_710_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln111_fu_714_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matrix_val_1_fu_719_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal bitcast_ln111_1_fu_723_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_reg_898 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal mul_1_i_reg_906 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal slot_id_reg_248 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln37_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_364_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_379_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_394_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal slot_id1_cast_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln58_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln55_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln86_fu_601_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln111_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln111_1_fu_705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln131_fu_748_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln131_1_fu_768_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal add_ln92_fu_644_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln59_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln29_fu_403_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln115_fu_668_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_slot_row_counter_0_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln115_1_fu_680_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_slot_row_counter_1_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_fu_305_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln87_fu_606_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal trunc_ln91_fu_628_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal bitcast_ln131_fu_753_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln131_1_fu_773_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_281_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_281_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_345_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln37_fu_358_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln37_1_fu_373_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln37_2_fu_388_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal slot_row_count_fu_491_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_cast_fu_476_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln58_1_fu_504_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln58_fu_508_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln80_fu_561_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln86_fu_583_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_cast_fu_553_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln86_1_fu_591_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln86_fu_595_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_309_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component HLS_CISR_spmv_accel_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HLS_CISR_spmv_accel_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HLS_CISR_spmv_accel_row_len_slot_arr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    row_len_slot_arr_U : component HLS_CISR_spmv_accel_row_len_slot_arr
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row_len_slot_arr_address0,
        ce0 => row_len_slot_arr_ce0,
        we0 => row_len_slot_arr_we0,
        d0 => row_len_slot_arr_d0,
        address1 => row_len_slot_arr_address1,
        ce1 => row_len_slot_arr_ce1,
        we1 => row_len_slot_arr_we1,
        d1 => ap_const_lv32_0,
        q1 => row_len_slot_arr_q1);

    fadd_32ns_32ns_32_5_full_dsp_1_U1 : component HLS_CISR_spmv_accel_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_281_p0,
        din1 => grp_fu_281_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_281_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U2 : component HLS_CISR_spmv_accel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_285_p0,
        din1 => grp_fu_285_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_285_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state8) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state8);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    max_row_id_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (cmd_start_read_read_fu_106_p2 = ap_const_lv1_1))) then 
                max_row_id <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln80_fu_569_p2 = ap_const_lv1_1) and (icmp_ln68_fu_543_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                max_row_id <= add_ln92_fu_644_p2;
            end if; 
        end if;
    end process;

    slot_counter_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_403_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_339_p2 = ap_const_lv1_0))) then 
                slot_counter_0 <= ap_const_lv32_0;
            elsif (((icmp_ln55_fu_498_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (trunc_ln58_reg_812 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                slot_counter_0 <= add_ln59_fu_519_p2;
            end if; 
        end if;
    end process;

    slot_counter_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_403_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_339_p2 = ap_const_lv1_0))) then 
                slot_counter_1 <= ap_const_lv32_0;
            elsif (((icmp_ln55_fu_498_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (trunc_ln58_reg_812 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                slot_counter_1 <= add_ln59_fu_519_p2;
            end if; 
        end if;
    end process;

    slot_id1_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                slot_id1_reg_259 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln49_fu_461_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                slot_id1_reg_259 <= add_ln49_fu_455_p2;
            end if; 
        end if;
    end process;

    slot_id2_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                slot_id2_reg_270 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln68_fu_543_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                slot_id2_reg_270 <= add_ln68_fu_537_p2;
            end if; 
        end if;
    end process;

    slot_id_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (cmd_start_read_read_fu_106_p2 = ap_const_lv1_1))) then 
                slot_id_reg_248 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                slot_id_reg_248 <= add_ln25_reg_782;
            end if; 
        end if;
    end process;

    slot_res_arr_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((trunc_ln29_fu_403_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_339_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln80_fu_569_p2 = ap_const_lv1_1) and (trunc_ln86_fu_549_p1 = ap_const_lv1_0) and (icmp_ln68_fu_543_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
                slot_res_arr_0 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                slot_res_arr_0 <= reg_323;
            end if; 
        end if;
    end process;

    slot_res_arr_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((trunc_ln29_fu_403_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_339_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln80_fu_569_p2 = ap_const_lv1_1) and (trunc_ln86_fu_549_p1 = ap_const_lv1_1) and (icmp_ln68_fu_543_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
                slot_res_arr_1 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                slot_res_arr_1 <= reg_323;
            end if; 
        end if;
    end process;

    slot_row_counter_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_403_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_339_p2 = ap_const_lv1_0))) then 
                slot_row_counter_0 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln80_reg_839 = ap_const_lv1_1) and (trunc_ln86_reg_835 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                slot_row_counter_0 <= row_len_slot_arr_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                slot_row_counter_0 <= add_ln115_fu_668_p2;
            end if; 
        end if;
    end process;

    slot_row_counter_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_403_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_339_p2 = ap_const_lv1_0))) then 
                slot_row_counter_1 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln80_reg_839 = ap_const_lv1_1) and (trunc_ln86_reg_835 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                slot_row_counter_1 <= row_len_slot_arr_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                slot_row_counter_1 <= add_ln115_1_fu_680_p2;
            end if; 
        end if;
    end process;

    slot_row_id_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_403_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_339_p2 = ap_const_lv1_0))) then 
                slot_row_id_0 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln80_fu_569_p2 = ap_const_lv1_1) and (trunc_ln86_fu_549_p1 = ap_const_lv1_0) and (icmp_ln68_fu_543_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                slot_row_id_0 <= trunc_ln91_fu_628_p1;
            end if; 
        end if;
    end process;

    slot_row_id_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_403_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_339_p2 = ap_const_lv1_0))) then 
                slot_row_id_1 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln80_fu_569_p2 = ap_const_lv1_1) and (trunc_ln86_fu_549_p1 = ap_const_lv1_1) and (icmp_ln68_fu_543_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                slot_row_id_1 <= trunc_ln91_fu_628_p1;
            end if; 
        end if;
    end process;

    slot_row_len_id_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_403_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_339_p2 = ap_const_lv1_0))) then 
                slot_row_len_id_0 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln80_fu_569_p2 = ap_const_lv1_1) and (trunc_ln86_fu_549_p1 = ap_const_lv1_0) and (icmp_ln68_fu_543_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                slot_row_len_id_0 <= add_ln87_fu_606_p2;
            end if; 
        end if;
    end process;

    slot_row_len_id_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_403_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_339_p2 = ap_const_lv1_0))) then 
                slot_row_len_id_1 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln80_fu_569_p2 = ap_const_lv1_1) and (trunc_ln86_fu_549_p1 = ap_const_lv1_1) and (icmp_ln68_fu_543_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                slot_row_len_id_1 <= add_ln87_fu_606_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln25_reg_782 <= add_ln25_fu_333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln68_fu_543_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln80_reg_839 <= icmp_ln80_fu_569_p2;
                trunc_ln86_reg_835 <= trunc_ln86_fu_549_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                mul_1_i_reg_906 <= grp_fu_285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                mul_i_reg_898 <= grp_fu_285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_319 <= inp_vec_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21))) then
                reg_323 <= grp_fu_281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_339_p2 = ap_const_lv1_0))) then
                    row_len_slot_arr_addr_3_reg_795(2) <= tmp_3_fu_394_p3(3 - 1 downto 0)(2);
                    row_len_slot_arr_addr_5_reg_790(2) <= tmp_2_fu_379_p3(3 - 1 downto 0)(2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                trunc_ln107_1_reg_868 <= trunc_ln107_1_fu_701_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                trunc_ln107_reg_853 <= trunc_ln107_fu_692_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln49_fu_461_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                trunc_ln58_reg_812 <= trunc_ln58_fu_472_p1;
            end if;
        end if;
    end process;
    row_len_slot_arr_addr_5_reg_790(1 downto 0) <= "10";
    row_len_slot_arr_addr_3_reg_795(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, cmd_start_read_read_fu_106_p2, ap_CS_fsm_state2, icmp_ln25_fu_339_p2, ap_enable_reg_pp1_iter0, icmp_ln49_fu_461_p2, ap_enable_reg_pp2_iter0, icmp_ln68_fu_543_p2, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (cmd_start_read_read_fu_106_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (cmd_start_read_read_fu_106_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_339_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln49_fu_461_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln49_fu_461_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln68_fu_543_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln68_fu_543_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln115_1_fu_680_p2 <= std_logic_vector(unsigned(grp_load_fu_305_p1) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln115_fu_668_p2 <= std_logic_vector(unsigned(grp_load_fu_301_p1) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln25_fu_333_p2 <= std_logic_vector(unsigned(slot_id_reg_248) + unsigned(ap_const_lv2_1));
    add_ln49_fu_455_p2 <= std_logic_vector(unsigned(slot_id1_reg_259) + unsigned(ap_const_lv2_1));
    add_ln58_fu_508_p2 <= std_logic_vector(unsigned(tmp_4_cast_fu_476_p3) + unsigned(trunc_ln58_1_fu_504_p1));
    add_ln59_fu_519_p2 <= std_logic_vector(unsigned(slot_row_count_fu_491_p3) + unsigned(ap_const_lv32_1));
    add_ln68_fu_537_p2 <= std_logic_vector(unsigned(slot_id2_reg_270) + unsigned(ap_const_lv2_1));
    add_ln86_fu_595_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_553_p3) + unsigned(trunc_ln86_1_fu_591_p1));
    add_ln87_fu_606_p2 <= std_logic_vector(unsigned(select_ln86_fu_583_p3) + unsigned(ap_const_lv32_1));
    add_ln92_fu_644_p2 <= std_logic_vector(unsigned(max_row_id) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state22 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln49_fu_461_p2)
    begin
        if ((icmp_ln49_fu_461_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state8_assign_proc : process(icmp_ln68_fu_543_p2)
    begin
        if ((icmp_ln68_fu_543_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_slot_row_counter_0_load_1_assign_proc : process(row_len_slot_arr_q1, slot_row_counter_0, ap_CS_fsm_pp2_stage0, trunc_ln86_reg_835, icmp_ln80_reg_839, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln80_reg_839 = ap_const_lv1_1) and (trunc_ln86_reg_835 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_sig_allocacmp_slot_row_counter_0_load_1 <= row_len_slot_arr_q1;
        else 
            ap_sig_allocacmp_slot_row_counter_0_load_1 <= slot_row_counter_0;
        end if; 
    end process;


    ap_sig_allocacmp_slot_row_counter_1_load_1_assign_proc : process(row_len_slot_arr_q1, slot_row_counter_1, ap_CS_fsm_pp2_stage0, trunc_ln86_reg_835, icmp_ln80_reg_839, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln80_reg_839 = ap_const_lv1_1) and (trunc_ln86_reg_835 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_sig_allocacmp_slot_row_counter_1_load_1 <= row_len_slot_arr_q1;
        else 
            ap_sig_allocacmp_slot_row_counter_1_load_1 <= slot_row_counter_1;
        end if; 
    end process;

    bitcast_ln111_1_fu_723_p1 <= reg_319;
    bitcast_ln111_fu_714_p1 <= reg_319;
    bitcast_ln131_1_fu_773_p1 <= reg_323;
    bitcast_ln131_fu_753_p1 <= reg_323;
    cmd_start_read_read_fu_106_p2 <= cmd_start;

    grp_fu_281_p0_assign_proc : process(slot_res_arr_0, slot_res_arr_1, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_281_p0 <= slot_res_arr_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_281_p0 <= slot_res_arr_0;
        else 
            grp_fu_281_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_281_p1_assign_proc : process(mul_i_reg_898, mul_1_i_reg_906, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_281_p1 <= mul_1_i_reg_906;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_281_p1 <= mul_i_reg_898;
        else 
            grp_fu_281_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_285_p0_assign_proc : process(ap_CS_fsm_state13, matrix_val_fu_710_p1, matrix_val_1_fu_719_p1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_285_p0 <= matrix_val_1_fu_719_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_285_p0 <= matrix_val_fu_710_p1;
        else 
            grp_fu_285_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_285_p1_assign_proc : process(ap_CS_fsm_state13, bitcast_ln111_fu_714_p1, ap_CS_fsm_state14, bitcast_ln111_1_fu_723_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_285_p1 <= bitcast_ln111_1_fu_723_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_285_p1 <= bitcast_ln111_fu_714_p1;
        else 
            grp_fu_285_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_309_p4 <= slot_data_arr_q0(34 downto 32);

    grp_load_fu_301_p1_assign_proc : process(slot_row_counter_0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, icmp_ln68_fu_543_p2, ap_CS_fsm_state10, ap_block_pp2_stage0, ap_sig_allocacmp_slot_row_counter_0_load_1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_load_fu_301_p1 <= slot_row_counter_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln68_fu_543_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_load_fu_301_p1 <= ap_sig_allocacmp_slot_row_counter_0_load_1;
        else 
            grp_load_fu_301_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_load_fu_305_p1_assign_proc : process(slot_row_counter_1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, icmp_ln68_fu_543_p2, ap_CS_fsm_state10, ap_block_pp2_stage0, ap_sig_allocacmp_slot_row_counter_1_load_1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_load_fu_305_p1 <= slot_row_counter_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln68_fu_543_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_load_fu_305_p1 <= ap_sig_allocacmp_slot_row_counter_1_load_1;
        else 
            grp_load_fu_305_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln25_fu_339_p2 <= "1" when (slot_id_reg_248 = ap_const_lv2_2) else "0";
    icmp_ln49_fu_461_p2 <= "1" when (slot_id1_reg_259 = ap_const_lv2_2) else "0";
    icmp_ln55_fu_498_p2 <= "1" when (slot_arr_row_len_q0 = ap_const_lv32_FFFFFFFF) else "0";
    icmp_ln68_fu_543_p2 <= "1" when (slot_id2_reg_270 = ap_const_lv2_2) else "0";
    icmp_ln80_fu_569_p2 <= "1" when (select_ln80_fu_561_p3 = ap_const_lv32_0) else "0";

    inp_vec_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state11, zext_ln111_fu_696_p1, zext_ln111_1_fu_705_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            inp_vec_address0 <= zext_ln111_1_fu_705_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            inp_vec_address0 <= zext_ln111_fu_696_p1(3 - 1 downto 0);
        else 
            inp_vec_address0 <= "XXX";
        end if; 
    end process;


    inp_vec_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            inp_vec_ce0 <= ap_const_logic_1;
        else 
            inp_vec_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    matrix_val_1_fu_719_p1 <= trunc_ln107_1_reg_868;
    matrix_val_fu_710_p1 <= trunc_ln107_reg_853;
    or_ln37_1_fu_373_p2 <= (tmp_fu_345_p3 or ap_const_lv4_2);
    or_ln37_2_fu_388_p2 <= (tmp_fu_345_p3 or ap_const_lv4_3);
    or_ln37_fu_358_p2 <= (tmp_fu_345_p3 or ap_const_lv4_1);

    output_vec_address0_assign_proc : process(ap_CS_fsm_state22, zext_ln131_fu_748_p1, zext_ln131_1_fu_768_p1, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_vec_address0 <= zext_ln131_1_fu_768_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            output_vec_address0 <= zext_ln131_fu_748_p1(3 - 1 downto 0);
        else 
            output_vec_address0 <= "XXX";
        end if; 
    end process;


    output_vec_ce0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            output_vec_ce0 <= ap_const_logic_1;
        else 
            output_vec_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_vec_d0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, bitcast_ln131_fu_753_p1, bitcast_ln131_1_fu_773_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_vec_d0 <= bitcast_ln131_1_fu_773_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            output_vec_d0 <= bitcast_ln131_fu_753_p1;
        else 
            output_vec_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_vec_we0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            output_vec_we0 <= ap_const_logic_1;
        else 
            output_vec_we0 <= ap_const_logic_0;
        end if; 
    end process;


    row_len_slot_arr_address0_assign_proc : process(ap_CS_fsm_state2, row_len_slot_arr_addr_3_reg_795, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state3, tmp_1_fu_364_p3, ap_block_pp1_stage0, zext_ln58_fu_514_p1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            row_len_slot_arr_address0 <= zext_ln58_fu_514_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_len_slot_arr_address0 <= row_len_slot_arr_addr_3_reg_795;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            row_len_slot_arr_address0 <= tmp_1_fu_364_p3(3 - 1 downto 0);
        else 
            row_len_slot_arr_address0 <= "XXX";
        end if; 
    end process;


    row_len_slot_arr_address1_assign_proc : process(ap_CS_fsm_state2, row_len_slot_arr_addr_5_reg_790, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state3, zext_ln37_fu_353_p1, zext_ln86_fu_601_p1, ap_block_pp2_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            row_len_slot_arr_address1 <= zext_ln86_fu_601_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_len_slot_arr_address1 <= row_len_slot_arr_addr_5_reg_790;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            row_len_slot_arr_address1 <= zext_ln37_fu_353_p1(3 - 1 downto 0);
        else 
            row_len_slot_arr_address1 <= "XXX";
        end if; 
    end process;


    row_len_slot_arr_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            row_len_slot_arr_ce0 <= ap_const_logic_1;
        else 
            row_len_slot_arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_len_slot_arr_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            row_len_slot_arr_ce1 <= ap_const_logic_1;
        else 
            row_len_slot_arr_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    row_len_slot_arr_d0_assign_proc : process(slot_arr_row_len_q0, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state3, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            row_len_slot_arr_d0 <= slot_arr_row_len_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            row_len_slot_arr_d0 <= ap_const_lv32_0;
        else 
            row_len_slot_arr_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    row_len_slot_arr_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln25_fu_339_p2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_state3, icmp_ln55_fu_498_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln55_fu_498_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_339_p2 = ap_const_lv1_0)))) then 
            row_len_slot_arr_we0 <= ap_const_logic_1;
        else 
            row_len_slot_arr_we0 <= ap_const_logic_0;
        end if; 
    end process;


    row_len_slot_arr_we1_assign_proc : process(ap_CS_fsm_state2, icmp_ln25_fu_339_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_339_p2 = ap_const_lv1_0)))) then 
            row_len_slot_arr_we1 <= ap_const_logic_1;
        else 
            row_len_slot_arr_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln80_fu_561_p3 <= 
        grp_load_fu_305_p1 when (trunc_ln86_fu_549_p1(0) = '1') else 
        grp_load_fu_301_p1;
    select_ln86_fu_583_p3 <= 
        slot_row_len_id_1 when (trunc_ln86_fu_549_p1(0) = '1') else 
        slot_row_len_id_0;
    slot_arr_row_len_address0 <= slot_id1_cast_fu_467_p1(1 - 1 downto 0);

    slot_arr_row_len_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            slot_arr_row_len_ce0 <= ap_const_logic_1;
        else 
            slot_arr_row_len_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    slot_data_arr_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            slot_data_arr_address0 <= ap_const_lv64_1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            slot_data_arr_address0 <= ap_const_lv64_0(1 - 1 downto 0);
        else 
            slot_data_arr_address0 <= "X";
        end if; 
    end process;


    slot_data_arr_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            slot_data_arr_ce0 <= ap_const_logic_1;
        else 
            slot_data_arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    slot_id1_cast_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(slot_id1_reg_259),64));
    slot_row_count_fu_491_p3 <= 
        slot_counter_1 when (trunc_ln58_reg_812(0) = '1') else 
        slot_counter_0;
    tmp_1_fu_364_p3 <= (ap_const_lv60_0 & or_ln37_fu_358_p2);
    tmp_2_fu_379_p3 <= (ap_const_lv60_0 & or_ln37_1_fu_373_p2);
    tmp_3_fu_394_p3 <= (ap_const_lv60_0 & or_ln37_2_fu_388_p2);
    tmp_4_cast_fu_476_p3 <= (trunc_ln58_reg_812 & ap_const_lv2_0);
    tmp_5_cast_fu_553_p3 <= (trunc_ln86_fu_549_p1 & ap_const_lv2_0);
    tmp_fu_345_p3 <= (slot_id_reg_248 & ap_const_lv2_0);
    trunc_ln107_1_fu_701_p1 <= slot_data_arr_q0(32 - 1 downto 0);
    trunc_ln107_fu_692_p1 <= slot_data_arr_q0(32 - 1 downto 0);
    trunc_ln29_fu_403_p1 <= slot_id_reg_248(1 - 1 downto 0);
    trunc_ln58_1_fu_504_p1 <= slot_row_count_fu_491_p3(3 - 1 downto 0);
    trunc_ln58_fu_472_p1 <= slot_id1_reg_259(1 - 1 downto 0);
    trunc_ln86_1_fu_591_p1 <= select_ln86_fu_583_p3(3 - 1 downto 0);
    trunc_ln86_fu_549_p1 <= slot_id2_reg_270(1 - 1 downto 0);
    trunc_ln91_fu_628_p1 <= max_row_id(3 - 1 downto 0);
    zext_ln111_1_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_309_p4),64));
    zext_ln111_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_309_p4),64));
    zext_ln131_1_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(slot_row_id_1),64));
    zext_ln131_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(slot_row_id_0),64));
    zext_ln37_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_345_p3),64));
    zext_ln58_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln58_fu_508_p2),64));
    zext_ln86_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln86_fu_595_p2),64));
end behav;
