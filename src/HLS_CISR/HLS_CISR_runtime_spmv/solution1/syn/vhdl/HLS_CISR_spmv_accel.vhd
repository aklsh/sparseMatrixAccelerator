-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HLS_CISR_spmv_accel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cmd_start : IN STD_LOGIC_VECTOR (0 downto 0);
    inp_vec : IN STD_LOGIC_VECTOR (31 downto 0);
    slot_data_arr : IN STD_LOGIC_VECTOR (63 downto 0);
    slot_arr_row_len : IN STD_LOGIC_VECTOR (31 downto 0);
    output_vec_i : IN STD_LOGIC_VECTOR (31 downto 0);
    output_vec_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_vec_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of HLS_CISR_spmv_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "HLS_CISR_spmv_accel_HLS_CISR_spmv_accel,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=41,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=900,HLS_SYN_LUT=1528,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_pp3_stage1 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_pp3_stage2 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_pp3_stage3 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_pp3_stage4 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal max_row_id : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal row_len_slot_arr_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_len_slot_arr_ce0 : STD_LOGIC;
    signal row_len_slot_arr_we0 : STD_LOGIC;
    signal row_len_slot_arr_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_len_slot_arr_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_len_slot_arr_ce1 : STD_LOGIC;
    signal row_len_slot_arr_we1 : STD_LOGIC;
    signal row_len_slot_arr_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slot_counter_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_counter_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_counter_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_counter_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_counter_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_counter_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_counter_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_counter_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_len_id_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_len_id_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_len_id_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_len_id_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_id2_reg_210 : STD_LOGIC_VECTOR (2 downto 0);
    signal slot_id3_reg_221 : STD_LOGIC_VECTOR (2 downto 0);
    signal cmd_start_read_read_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln53_fu_262_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln75_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_742 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln70_fu_384_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln87_fu_481_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state6_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln87_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln96_fu_493_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln96_reg_766 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln93_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_770 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_789 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln114_fu_652_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln114_reg_794 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state12_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln114_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_reg_799 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage1 : signal is "none";
    signal ap_block_state13_pp3_stage1_iter0 : BOOLEAN;
    signal ap_block_pp3_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_state16_pp3_stage4_iter0 : BOOLEAN;
    signal ap_block_pp3_stage4_subdone : BOOLEAN;
    signal ap_CS_fsm_pp3_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage4 : signal is "none";
    signal slot_id_reg_188 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln53_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slot_id_1_reg_199 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln70_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_slot_id3_phi_fu_225_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal zext_ln62_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_293_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln78_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln96_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal add_ln101_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln79_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln78_fu_396_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln55_fu_302_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln120_fu_682_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln120_fu_664_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_slot_row_counter_0_load : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_slot_row_counter_1_load : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_fu_244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_slot_row_counter_2_load : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_fu_248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_slot_row_counter_3_load : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_fu_252_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln97_fu_568_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln119_2_fu_717_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal grp_fu_232_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp3_stage1 : BOOLEAN;
    signal grp_fu_236_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_236_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_274_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln62_fu_287_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal slot_row_count_fu_422_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal slot_row_count_fu_422_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln70_fu_400_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln78_1_fu_436_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln78_fu_440_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_503_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_539_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln87_fu_497_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln96_1_fu_553_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln96_fu_557_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln117_fu_638_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_668_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_668_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp3_stage1_subdone : BOOLEAN;
    signal ap_block_state14_pp3_stage2_iter0 : BOOLEAN;
    signal ap_block_pp3_stage2_subdone : BOOLEAN;
    signal ap_block_pp3_stage2_11001 : BOOLEAN;
    signal ap_block_state15_pp3_stage3_iter0 : BOOLEAN;
    signal ap_block_pp3_stage3_subdone : BOOLEAN;
    signal ap_block_pp3_stage3_11001 : BOOLEAN;
    signal ap_block_pp3_stage4_11001 : BOOLEAN;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component HLS_CISR_spmv_accel_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HLS_CISR_spmv_accel_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HLS_CISR_spmv_accel_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HLS_CISR_spmv_accel_row_len_slot_arr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    row_len_slot_arr_U : component HLS_CISR_spmv_accel_row_len_slot_arr
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row_len_slot_arr_address0,
        ce0 => row_len_slot_arr_ce0,
        we0 => row_len_slot_arr_we0,
        d0 => row_len_slot_arr_d0,
        address1 => row_len_slot_arr_address1,
        ce1 => row_len_slot_arr_ce1,
        we1 => row_len_slot_arr_we1,
        d1 => ap_const_lv32_0,
        q1 => row_len_slot_arr_q1);

    fadd_32ns_32ns_32_5_full_dsp_1_U1 : component HLS_CISR_spmv_accel_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_232_p0,
        din1 => mul_reg_789,
        ce => ap_const_logic_1,
        dout => grp_fu_232_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U2 : component HLS_CISR_spmv_accel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_236_p0,
        din1 => grp_fu_236_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_236_p2);

    mux_42_32_1_1_U3 : component HLS_CISR_spmv_accel_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => slot_counter_0,
        din1 => slot_counter_1,
        din2 => slot_counter_2,
        din3 => slot_counter_3,
        din4 => slot_row_count_fu_422_p5,
        dout => slot_row_count_fu_422_p6);

    mux_42_32_1_1_U4 : component HLS_CISR_spmv_accel_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => grp_load_fu_240_p1,
        din1 => grp_load_fu_244_p1,
        din2 => grp_load_fu_248_p1,
        din3 => grp_load_fu_252_p1,
        din4 => trunc_ln96_fu_493_p1,
        dout => tmp_fu_503_p6);

    mux_42_32_1_1_U5 : component HLS_CISR_spmv_accel_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => slot_row_len_id_0,
        din1 => slot_row_len_id_1,
        din2 => slot_row_len_id_2,
        din3 => slot_row_len_id_3,
        din4 => trunc_ln96_fu_493_p1,
        dout => tmp_1_fu_539_p6);

    mux_42_32_1_1_U6 : component HLS_CISR_spmv_accel_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => grp_load_fu_240_p1,
        din1 => grp_load_fu_244_p1,
        din2 => grp_load_fu_248_p1,
        din3 => grp_load_fu_252_p1,
        din4 => tmp_2_fu_668_p5,
        dout => tmp_2_fu_668_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state6) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state6);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state12) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp3_stage4) and (ap_const_boolean_0 = ap_block_pp3_stage4_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    max_row_id_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmd_start_read_read_fu_108_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                max_row_id <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln93_fu_517_p2 = ap_const_lv1_1) and (icmp_ln87_fu_487_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
                max_row_id <= add_ln101_fu_602_p2;
            end if; 
        end if;
    end process;

    slot_counter_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln55_fu_302_p1 = ap_const_lv2_0) and (icmp_ln53_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_counter_0 <= ap_const_lv32_0;
            elsif (((icmp_ln75_reg_742 = ap_const_lv1_0) and (trunc_ln78_fu_396_p1 = ap_const_lv2_0) and (icmp_ln70_fu_390_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                slot_counter_0 <= add_ln79_fu_451_p2;
            end if; 
        end if;
    end process;

    slot_counter_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln55_fu_302_p1 = ap_const_lv2_1) and (icmp_ln53_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_counter_1 <= ap_const_lv32_0;
            elsif (((icmp_ln75_reg_742 = ap_const_lv1_0) and (trunc_ln78_fu_396_p1 = ap_const_lv2_1) and (icmp_ln70_fu_390_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                slot_counter_1 <= add_ln79_fu_451_p2;
            end if; 
        end if;
    end process;

    slot_counter_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln55_fu_302_p1 = ap_const_lv2_2) and (icmp_ln53_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_counter_2 <= ap_const_lv32_0;
            elsif (((icmp_ln75_reg_742 = ap_const_lv1_0) and (trunc_ln78_fu_396_p1 = ap_const_lv2_2) and (icmp_ln70_fu_390_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                slot_counter_2 <= add_ln79_fu_451_p2;
            end if; 
        end if;
    end process;

    slot_counter_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln55_fu_302_p1 = ap_const_lv2_3) and (icmp_ln53_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_counter_3 <= ap_const_lv32_0;
            elsif (((icmp_ln75_reg_742 = ap_const_lv1_0) and (trunc_ln78_fu_396_p1 = ap_const_lv2_3) and (icmp_ln70_fu_390_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                slot_counter_3 <= add_ln79_fu_451_p2;
            end if; 
        end if;
    end process;

    slot_id2_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                slot_id2_reg_210 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln87_fu_487_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
                slot_id2_reg_210 <= add_ln87_fu_481_p2;
            end if; 
        end if;
    end process;

    slot_id3_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                slot_id3_reg_221 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln114_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                slot_id3_reg_221 <= add_ln114_reg_794;
            end if; 
        end if;
    end process;

    slot_id_1_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_fu_390_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                slot_id_1_reg_199 <= add_ln70_fu_384_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                slot_id_1_reg_199 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    slot_id_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmd_start_read_read_fu_108_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                slot_id_reg_188 <= ap_const_lv3_0;
            elsif (((icmp_ln53_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_id_reg_188 <= add_ln53_fu_262_p2;
            end if; 
        end if;
    end process;

    slot_row_counter_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln55_fu_302_p1 = ap_const_lv2_0) and (icmp_ln53_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_row_counter_0 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln93_reg_770 = ap_const_lv1_1) and (trunc_ln96_reg_766 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                slot_row_counter_0 <= row_len_slot_arr_q1;
            elsif (((trunc_ln120_fu_664_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln114_fu_658_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                slot_row_counter_0 <= add_ln120_fu_682_p2;
            end if; 
        end if;
    end process;

    slot_row_counter_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln55_fu_302_p1 = ap_const_lv2_1) and (icmp_ln53_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_row_counter_1 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln93_reg_770 = ap_const_lv1_1) and (trunc_ln96_reg_766 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                slot_row_counter_1 <= row_len_slot_arr_q1;
            elsif (((trunc_ln120_fu_664_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln114_fu_658_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                slot_row_counter_1 <= add_ln120_fu_682_p2;
            end if; 
        end if;
    end process;

    slot_row_counter_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln55_fu_302_p1 = ap_const_lv2_2) and (icmp_ln53_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_row_counter_2 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln93_reg_770 = ap_const_lv1_1) and (trunc_ln96_reg_766 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                slot_row_counter_2 <= row_len_slot_arr_q1;
            elsif (((trunc_ln120_fu_664_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln114_fu_658_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                slot_row_counter_2 <= add_ln120_fu_682_p2;
            end if; 
        end if;
    end process;

    slot_row_counter_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln55_fu_302_p1 = ap_const_lv2_3) and (icmp_ln53_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_row_counter_3 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln93_reg_770 = ap_const_lv1_1) and (trunc_ln96_reg_766 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                slot_row_counter_3 <= row_len_slot_arr_q1;
            elsif (((trunc_ln120_fu_664_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln114_fu_658_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                slot_row_counter_3 <= add_ln120_fu_682_p2;
            end if; 
        end if;
    end process;

    slot_row_len_id_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln55_fu_302_p1 = ap_const_lv2_0) and (icmp_ln53_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_row_len_id_0 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln93_fu_517_p2 = ap_const_lv1_1) and (trunc_ln96_fu_493_p1 = ap_const_lv2_0) and (icmp_ln87_fu_487_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
                slot_row_len_id_0 <= add_ln97_fu_568_p2;
            end if; 
        end if;
    end process;

    slot_row_len_id_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln55_fu_302_p1 = ap_const_lv2_1) and (icmp_ln53_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_row_len_id_1 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln93_fu_517_p2 = ap_const_lv1_1) and (trunc_ln96_fu_493_p1 = ap_const_lv2_1) and (icmp_ln87_fu_487_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
                slot_row_len_id_1 <= add_ln97_fu_568_p2;
            end if; 
        end if;
    end process;

    slot_row_len_id_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln55_fu_302_p1 = ap_const_lv2_2) and (icmp_ln53_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_row_len_id_2 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln93_fu_517_p2 = ap_const_lv1_1) and (trunc_ln96_fu_493_p1 = ap_const_lv2_2) and (icmp_ln87_fu_487_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
                slot_row_len_id_2 <= add_ln97_fu_568_p2;
            end if; 
        end if;
    end process;

    slot_row_len_id_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln55_fu_302_p1 = ap_const_lv2_3) and (icmp_ln53_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                slot_row_len_id_3 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln93_fu_517_p2 = ap_const_lv1_1) and (trunc_ln96_fu_493_p1 = ap_const_lv2_3) and (icmp_ln87_fu_487_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
                slot_row_len_id_3 <= add_ln97_fu_568_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                add_ln114_reg_794 <= add_ln114_fu_652_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln114_reg_799 <= icmp_ln114_fu_658_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln75_reg_742 <= icmp_ln75_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln87_fu_487_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln93_reg_770 <= icmp_ln93_fu_517_p2;
                trunc_ln96_reg_766 <= trunc_ln96_fu_493_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                mul_reg_789 <= grp_fu_236_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, cmd_start_read_read_fu_108_p2, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_enable_reg_pp2_iter0, icmp_ln87_fu_487_p2, ap_enable_reg_pp3_iter0, icmp_ln114_fu_658_p2, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_block_pp3_stage4_subdone, icmp_ln53_fu_268_p2, icmp_ln70_fu_390_p2, ap_block_pp3_stage1_subdone, ap_block_pp3_stage2_subdone, ap_block_pp3_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((cmd_start_read_read_fu_108_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((cmd_start_read_read_fu_108_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln53_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln70_fu_390_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln87_fu_487_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln87_fu_487_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((icmp_ln114_fu_658_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                elsif (((icmp_ln114_fu_658_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_pp3_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                end if;
            when ap_ST_fsm_pp3_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                end if;
            when ap_ST_fsm_pp3_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage3;
                end if;
            when ap_ST_fsm_pp3_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage4;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln101_fu_602_p2 <= std_logic_vector(unsigned(max_row_id) + unsigned(ap_const_lv32_1));
    add_ln114_fu_652_p2 <= std_logic_vector(unsigned(ap_phi_mux_slot_id3_phi_fu_225_p4) + unsigned(ap_const_lv3_1));
    add_ln120_fu_682_p2 <= std_logic_vector(unsigned(tmp_2_fu_668_p6) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln53_fu_262_p2 <= std_logic_vector(unsigned(slot_id_reg_188) + unsigned(ap_const_lv3_1));
    add_ln70_fu_384_p2 <= std_logic_vector(unsigned(slot_id_1_reg_199) + unsigned(ap_const_lv3_1));
    add_ln78_fu_440_p2 <= std_logic_vector(unsigned(shl_ln70_fu_400_p2) + unsigned(trunc_ln78_1_fu_436_p1));
    add_ln79_fu_451_p2 <= std_logic_vector(unsigned(slot_row_count_fu_422_p6) + unsigned(ap_const_lv32_1));
    add_ln87_fu_481_p2 <= std_logic_vector(unsigned(slot_id2_reg_210) + unsigned(ap_const_lv3_1));
    add_ln96_fu_557_p2 <= std_logic_vector(unsigned(shl_ln87_fu_497_p2) + unsigned(trunc_ln96_1_fu_553_p1));
    add_ln97_fu_568_p2 <= std_logic_vector(unsigned(tmp_1_fu_539_p6) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp3_stage1 <= ap_CS_fsm(11);
    ap_CS_fsm_pp3_stage4 <= ap_CS_fsm(14);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp3_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp3_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp3_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp3_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp2_exit_iter0_state6_assign_proc : process(icmp_ln87_fu_487_p2)
    begin
        if ((icmp_ln87_fu_487_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state12_assign_proc : process(icmp_ln114_fu_658_p2)
    begin
        if ((icmp_ln114_fu_658_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_slot_id3_phi_fu_225_p4_assign_proc : process(slot_id3_reg_221, add_ln114_reg_794, ap_CS_fsm_pp3_stage0, icmp_ln114_reg_799, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln114_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            ap_phi_mux_slot_id3_phi_fu_225_p4 <= add_ln114_reg_794;
        else 
            ap_phi_mux_slot_id3_phi_fu_225_p4 <= slot_id3_reg_221;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_slot_row_counter_0_load_assign_proc : process(row_len_slot_arr_q1, slot_row_counter_0, ap_CS_fsm_pp2_stage0, trunc_ln96_reg_766, icmp_ln93_reg_770, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln93_reg_770 = ap_const_lv1_1) and (trunc_ln96_reg_766 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_sig_allocacmp_slot_row_counter_0_load <= row_len_slot_arr_q1;
        else 
            ap_sig_allocacmp_slot_row_counter_0_load <= slot_row_counter_0;
        end if; 
    end process;


    ap_sig_allocacmp_slot_row_counter_1_load_assign_proc : process(row_len_slot_arr_q1, slot_row_counter_1, ap_CS_fsm_pp2_stage0, trunc_ln96_reg_766, icmp_ln93_reg_770, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln93_reg_770 = ap_const_lv1_1) and (trunc_ln96_reg_766 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_sig_allocacmp_slot_row_counter_1_load <= row_len_slot_arr_q1;
        else 
            ap_sig_allocacmp_slot_row_counter_1_load <= slot_row_counter_1;
        end if; 
    end process;


    ap_sig_allocacmp_slot_row_counter_2_load_assign_proc : process(row_len_slot_arr_q1, slot_row_counter_2, ap_CS_fsm_pp2_stage0, trunc_ln96_reg_766, icmp_ln93_reg_770, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln93_reg_770 = ap_const_lv1_1) and (trunc_ln96_reg_766 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_sig_allocacmp_slot_row_counter_2_load <= row_len_slot_arr_q1;
        else 
            ap_sig_allocacmp_slot_row_counter_2_load <= slot_row_counter_2;
        end if; 
    end process;


    ap_sig_allocacmp_slot_row_counter_3_load_assign_proc : process(row_len_slot_arr_q1, slot_row_counter_3, ap_CS_fsm_pp2_stage0, trunc_ln96_reg_766, icmp_ln93_reg_770, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln93_reg_770 = ap_const_lv1_1) and (trunc_ln96_reg_766 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_sig_allocacmp_slot_row_counter_3_load <= row_len_slot_arr_q1;
        else 
            ap_sig_allocacmp_slot_row_counter_3_load <= slot_row_counter_3;
        end if; 
    end process;

    bitcast_ln119_2_fu_717_p1 <= grp_fu_232_p2;
    cmd_start_read_read_fu_108_p2 <= cmd_start;
    grp_fu_232_p0 <= output_vec_i;
    grp_fu_236_p0 <= trunc_ln117_fu_638_p1;
    grp_fu_236_p1 <= inp_vec;

    grp_load_fu_240_p1_assign_proc : process(slot_row_counter_0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, icmp_ln87_fu_487_p2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, icmp_ln114_fu_658_p2, ap_block_pp3_stage0, ap_block_pp2_stage0, ap_sig_allocacmp_slot_row_counter_0_load)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln114_fu_658_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            grp_load_fu_240_p1 <= slot_row_counter_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln87_fu_487_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            grp_load_fu_240_p1 <= ap_sig_allocacmp_slot_row_counter_0_load;
        else 
            grp_load_fu_240_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_load_fu_244_p1_assign_proc : process(slot_row_counter_1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, icmp_ln87_fu_487_p2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, icmp_ln114_fu_658_p2, ap_block_pp3_stage0, ap_block_pp2_stage0, ap_sig_allocacmp_slot_row_counter_1_load)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln114_fu_658_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            grp_load_fu_244_p1 <= slot_row_counter_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln87_fu_487_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            grp_load_fu_244_p1 <= ap_sig_allocacmp_slot_row_counter_1_load;
        else 
            grp_load_fu_244_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_load_fu_248_p1_assign_proc : process(slot_row_counter_2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, icmp_ln87_fu_487_p2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, icmp_ln114_fu_658_p2, ap_block_pp3_stage0, ap_block_pp2_stage0, ap_sig_allocacmp_slot_row_counter_2_load)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln114_fu_658_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            grp_load_fu_248_p1 <= slot_row_counter_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln87_fu_487_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            grp_load_fu_248_p1 <= ap_sig_allocacmp_slot_row_counter_2_load;
        else 
            grp_load_fu_248_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_load_fu_252_p1_assign_proc : process(slot_row_counter_3, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, icmp_ln87_fu_487_p2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, icmp_ln114_fu_658_p2, ap_block_pp3_stage0, ap_block_pp2_stage0, ap_sig_allocacmp_slot_row_counter_3_load)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln114_fu_658_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            grp_load_fu_252_p1 <= slot_row_counter_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln87_fu_487_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            grp_load_fu_252_p1 <= ap_sig_allocacmp_slot_row_counter_3_load;
        else 
            grp_load_fu_252_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln114_fu_658_p2 <= "1" when (ap_phi_mux_slot_id3_phi_fu_225_p4 = ap_const_lv3_4) else "0";
    icmp_ln53_fu_268_p2 <= "1" when (slot_id_reg_188 = ap_const_lv3_4) else "0";
    icmp_ln70_fu_390_p2 <= "1" when (slot_id_1_reg_199 = ap_const_lv3_4) else "0";
    icmp_ln75_fu_378_p2 <= "1" when (slot_arr_row_len = ap_const_lv32_FFFFFFFF) else "0";
    icmp_ln87_fu_487_p2 <= "1" when (slot_id2_reg_210 = ap_const_lv3_4) else "0";
    icmp_ln93_fu_517_p2 <= "1" when (tmp_fu_503_p6 = ap_const_lv32_0) else "0";
    or_ln62_fu_287_p2 <= (tmp_3_fu_274_p3 or ap_const_lv4_1);

    output_vec_o_assign_proc : process(output_vec_i, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, bitcast_ln119_2_fu_717_p1, ap_block_pp3_stage0_01001)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_01001))) then 
            output_vec_o <= bitcast_ln119_2_fu_717_p1;
        else 
            output_vec_o <= output_vec_i;
        end if; 
    end process;


    output_vec_o_ap_vld_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            output_vec_o_ap_vld <= ap_const_logic_1;
        else 
            output_vec_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    row_len_slot_arr_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, tmp_4_fu_293_p3, zext_ln78_fu_446_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            row_len_slot_arr_address0 <= zext_ln78_fu_446_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            row_len_slot_arr_address0 <= tmp_4_fu_293_p3(3 - 1 downto 0);
        else 
            row_len_slot_arr_address0 <= "XXX";
        end if; 
    end process;


    row_len_slot_arr_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, zext_ln62_fu_282_p1, zext_ln96_fu_563_p1, ap_block_pp2_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            row_len_slot_arr_address1 <= zext_ln96_fu_563_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            row_len_slot_arr_address1 <= zext_ln62_fu_282_p1(3 - 1 downto 0);
        else 
            row_len_slot_arr_address1 <= "XXX";
        end if; 
    end process;


    row_len_slot_arr_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            row_len_slot_arr_ce0 <= ap_const_logic_1;
        else 
            row_len_slot_arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_len_slot_arr_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then 
            row_len_slot_arr_ce1 <= ap_const_logic_1;
        else 
            row_len_slot_arr_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    row_len_slot_arr_d0_assign_proc : process(slot_arr_row_len, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            row_len_slot_arr_d0 <= slot_arr_row_len;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            row_len_slot_arr_d0 <= ap_const_lv32_0;
        else 
            row_len_slot_arr_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    row_len_slot_arr_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln75_reg_742, ap_CS_fsm_state4, icmp_ln53_fu_268_p2, icmp_ln70_fu_390_p2)
    begin
        if ((((icmp_ln75_reg_742 = ap_const_lv1_0) and (icmp_ln70_fu_390_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln53_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            row_len_slot_arr_we0 <= ap_const_logic_1;
        else 
            row_len_slot_arr_we0 <= ap_const_logic_0;
        end if; 
    end process;


    row_len_slot_arr_we1_assign_proc : process(ap_CS_fsm_state2, icmp_ln53_fu_268_p2)
    begin
        if (((icmp_ln53_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            row_len_slot_arr_we1 <= ap_const_logic_1;
        else 
            row_len_slot_arr_we1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln70_fu_400_p2 <= std_logic_vector(shift_left(unsigned(slot_id_1_reg_199),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
    shl_ln87_fu_497_p2 <= std_logic_vector(shift_left(unsigned(slot_id2_reg_210),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
    slot_row_count_fu_422_p5 <= slot_id_1_reg_199(2 - 1 downto 0);
    tmp_2_fu_668_p5 <= ap_phi_mux_slot_id3_phi_fu_225_p4(2 - 1 downto 0);
    tmp_3_fu_274_p3 <= (slot_id_reg_188 & ap_const_lv1_0);
    tmp_4_fu_293_p3 <= (ap_const_lv60_0 & or_ln62_fu_287_p2);
    trunc_ln117_fu_638_p1 <= slot_data_arr(32 - 1 downto 0);
    trunc_ln120_fu_664_p1 <= ap_phi_mux_slot_id3_phi_fu_225_p4(2 - 1 downto 0);
    trunc_ln55_fu_302_p1 <= slot_id_reg_188(2 - 1 downto 0);
    trunc_ln78_1_fu_436_p1 <= slot_row_count_fu_422_p6(3 - 1 downto 0);
    trunc_ln78_fu_396_p1 <= slot_id_1_reg_199(2 - 1 downto 0);
    trunc_ln96_1_fu_553_p1 <= tmp_1_fu_539_p6(3 - 1 downto 0);
    trunc_ln96_fu_493_p1 <= slot_id2_reg_210(2 - 1 downto 0);
    zext_ln62_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_274_p3),64));
    zext_ln78_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln78_fu_440_p2),64));
    zext_ln96_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln96_fu_557_p2),64));
end behav;
