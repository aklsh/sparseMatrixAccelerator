// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="HLS_CISR_spmv_accel_HLS_CISR_spmv_accel,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=21,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1125,HLS_SYN_LUT=1634,HLS_VERSION=2020_2}" *)

module HLS_CISR_spmv_accel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cmd_start,
        inp_vec_address0,
        inp_vec_ce0,
        inp_vec_q0,
        slot_data_arr_address0,
        slot_data_arr_ce0,
        slot_data_arr_q0,
        slot_arr_row_len_address0,
        slot_arr_row_len_ce0,
        slot_arr_row_len_q0,
        output_vec_address0,
        output_vec_ce0,
        output_vec_we0,
        output_vec_d0
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] cmd_start;
output  [2:0] inp_vec_address0;
output   inp_vec_ce0;
input  [31:0] inp_vec_q0;
output  [0:0] slot_data_arr_address0;
output   slot_data_arr_ce0;
input  [63:0] slot_data_arr_q0;
output  [0:0] slot_arr_row_len_address0;
output   slot_arr_row_len_ce0;
input  [31:0] slot_arr_row_len_q0;
output  [2:0] output_vec_address0;
output   output_vec_ce0;
output   output_vec_we0;
output  [31:0] output_vec_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] inp_vec_address0;
reg inp_vec_ce0;
reg[0:0] slot_data_arr_address0;
reg slot_data_arr_ce0;
reg[0:0] slot_arr_row_len_address0;
reg slot_arr_row_len_ce0;
reg[2:0] output_vec_address0;
reg output_vec_ce0;
reg output_vec_we0;
reg[31:0] output_vec_d0;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] max_row_id;
reg   [2:0] row_len_slot_arr_address0;
reg    row_len_slot_arr_ce0;
reg    row_len_slot_arr_we0;
reg   [31:0] row_len_slot_arr_d0;
wire   [31:0] row_len_slot_arr_q0;
reg   [2:0] row_len_slot_arr_address1;
reg    row_len_slot_arr_ce1;
reg    row_len_slot_arr_we1;
reg   [31:0] row_len_slot_arr_d1;
wire   [31:0] row_len_slot_arr_q1;
reg   [31:0] slot_counter_0;
reg   [31:0] slot_counter_1;
reg   [31:0] slot_row_counter_0;
reg   [31:0] slot_res_arr_0;
reg   [31:0] slot_row_len_id_0;
reg   [2:0] slot_row_id_0;
reg   [31:0] slot_row_counter_1;
reg   [31:0] slot_res_arr_1;
reg   [31:0] slot_row_len_id_1;
reg   [2:0] slot_row_id_1;
reg   [31:0] reg_426;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_390_p2;
reg   [31:0] reg_430;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire   [0:0] cmd_start_read_read_fu_106_p2;
wire   [1:0] add_ln25_fu_438_p2;
reg   [1:0] add_ln25_reg_840;
wire    ap_CS_fsm_state2;
reg   [2:0] row_len_slot_arr_addr_6_reg_848;
wire   [0:0] icmp_ln25_fu_444_p2;
reg   [2:0] row_len_slot_arr_addr_7_reg_853;
wire    ap_CS_fsm_state4;
wire   [2:0] trunc_ln53_fu_560_p1;
reg   [2:0] trunc_ln53_reg_866;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln80_fu_620_p2;
reg   [0:0] icmp_ln80_reg_885;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln80_1_fu_668_p2;
reg   [0:0] icmp_ln80_1_reg_897;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [31:0] add_ln92_1_fu_711_p2;
wire   [31:0] trunc_ln107_fu_729_p1;
reg   [31:0] trunc_ln107_reg_921;
wire    ap_CS_fsm_state9;
wire   [31:0] trunc_ln107_1_fu_750_p1;
reg   [31:0] trunc_ln107_1_reg_936;
wire   [31:0] matrix_val_fu_759_p1;
wire   [31:0] bitcast_ln111_fu_763_p1;
wire   [31:0] matrix_val_1_fu_768_p1;
wire    ap_CS_fsm_state12;
wire   [31:0] bitcast_ln111_1_fu_772_p1;
wire   [31:0] grp_fu_394_p2;
reg   [31:0] mul_i_reg_966;
wire    ap_CS_fsm_state14;
reg   [31:0] mul_1_i_reg_974;
wire    ap_CS_fsm_state15;
reg   [1:0] slot_id_reg_275;
wire    ap_CS_fsm_state3;
reg   [0:0] max_row_id_flag_0_reg_286;
reg   [31:0] max_row_id_loc_0_reg_300;
reg   [0:0] ap_phi_mux_max_row_id_flag_1_phi_fu_315_p4;
reg   [0:0] max_row_id_flag_1_reg_312;
wire   [31:0] add_ln92_fu_652_p2;
reg   [31:0] ap_phi_mux_max_row_id_new_1_phi_fu_328_p4;
reg   [31:0] max_row_id_new_1_reg_324;
reg   [31:0] ap_phi_mux_max_row_id_loc_1_phi_fu_339_p4;
reg   [31:0] max_row_id_loc_1_reg_336;
reg   [31:0] empty_15_reg_347;
reg   [31:0] max_row_id_new_2_reg_358;
reg   [31:0] empty_16_reg_369;
wire   [0:0] ap_phi_mux_max_row_id_flag_2_phi_fu_382_p4;
reg   [0:0] max_row_id_flag_2_reg_378;
wire   [63:0] zext_ln37_fu_458_p1;
wire   [63:0] tmp_1_fu_469_p3;
wire   [63:0] tmp_2_fu_484_p3;
wire   [63:0] tmp_3_fu_499_p3;
wire   [63:0] zext_ln58_fu_568_p1;
wire   [0:0] grp_fu_410_p2;
wire   [63:0] zext_ln58_1_fu_599_p1;
wire   [63:0] zext_ln86_fu_630_p1;
wire   [63:0] zext_ln86_1_fu_688_p1;
wire   [63:0] zext_ln111_fu_733_p1;
wire   [63:0] zext_ln111_1_fu_754_p1;
wire   [63:0] zext_ln131_fu_797_p1;
wire   [63:0] zext_ln131_1_fu_817_p1;
wire    ap_CS_fsm_state21;
wire   [31:0] add_ln59_fu_573_p2;
wire   [0:0] trunc_ln29_fu_508_p1;
wire   [31:0] add_ln59_1_fu_604_p2;
wire   [31:0] add_ln115_fu_717_p2;
wire   [31:0] add_ln87_fu_635_p2;
wire   [31:0] add_ln115_1_fu_738_p2;
wire    ap_CS_fsm_state16;
wire   [31:0] add_ln87_1_fu_693_p2;
wire   [2:0] trunc_ln80_fu_660_p1;
wire   [31:0] bitcast_ln131_fu_802_p1;
wire   [31:0] bitcast_ln131_1_fu_822_p1;
reg   [31:0] grp_fu_390_p0;
reg   [31:0] grp_fu_390_p1;
reg   [31:0] grp_fu_394_p0;
reg   [31:0] grp_fu_394_p1;
wire   [3:0] tmp_fu_450_p3;
wire   [3:0] or_ln37_fu_463_p2;
wire   [3:0] or_ln37_1_fu_478_p2;
wire   [3:0] or_ln37_2_fu_493_p2;
wire   [2:0] trunc_ln58_fu_589_p1;
wire   [2:0] xor_ln58_fu_593_p2;
wire   [2:0] trunc_ln86_fu_678_p1;
wire   [2:0] xor_ln86_fu_682_p2;
wire   [2:0] grp_fu_416_p4;
reg   [20:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
#0 max_row_id = 32'd0;
#0 slot_counter_0 = 32'd0;
#0 slot_counter_1 = 32'd0;
#0 slot_row_counter_0 = 32'd0;
#0 slot_res_arr_0 = 32'd0;
#0 slot_row_len_id_0 = 32'd0;
#0 slot_row_id_0 = 3'd0;
#0 slot_row_counter_1 = 32'd0;
#0 slot_res_arr_1 = 32'd0;
#0 slot_row_len_id_1 = 32'd0;
#0 slot_row_id_1 = 3'd0;
end

HLS_CISR_spmv_accel_row_len_slot_arr #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
row_len_slot_arr_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(row_len_slot_arr_address0),
    .ce0(row_len_slot_arr_ce0),
    .we0(row_len_slot_arr_we0),
    .d0(row_len_slot_arr_d0),
    .q0(row_len_slot_arr_q0),
    .address1(row_len_slot_arr_address1),
    .ce1(row_len_slot_arr_ce1),
    .we1(row_len_slot_arr_we1),
    .d1(row_len_slot_arr_d1),
    .q1(row_len_slot_arr_q1)
);

HLS_CISR_spmv_accel_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_390_p0),
    .din1(grp_fu_390_p1),
    .ce(1'b1),
    .dout(grp_fu_390_p2)
);

HLS_CISR_spmv_accel_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_394_p0),
    .din1(grp_fu_394_p1),
    .ce(1'b1),
    .dout(grp_fu_394_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln80_fu_620_p2 == 1'd0))) begin
        empty_15_reg_347 <= slot_row_counter_0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln80_reg_885 == 1'd1))) begin
        empty_15_reg_347 <= row_len_slot_arr_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln80_1_fu_668_p2 == 1'd0))) begin
        empty_16_reg_369 <= slot_row_counter_1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln80_1_reg_897 == 1'd1))) begin
        empty_16_reg_369 <= row_len_slot_arr_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (cmd_start_read_read_fu_106_p2 == 1'd1))) begin
        max_row_id_flag_0_reg_286 <= 1'd1;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (cmd_start_read_read_fu_106_p2 == 1'd0))) begin
        max_row_id_flag_0_reg_286 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln80_fu_620_p2 == 1'd0))) begin
        max_row_id_flag_1_reg_312 <= max_row_id_flag_0_reg_286;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln80_reg_885 == 1'd1))) begin
        max_row_id_flag_1_reg_312 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln80_1_fu_668_p2 == 1'd0))) begin
        max_row_id_flag_2_reg_378 <= ap_phi_mux_max_row_id_flag_1_phi_fu_315_p4;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln80_1_reg_897 == 1'd1))) begin
        max_row_id_flag_2_reg_378 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (cmd_start_read_read_fu_106_p2 == 1'd1))) begin
        max_row_id_loc_0_reg_300 <= 32'd0;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (cmd_start_read_read_fu_106_p2 == 1'd0))) begin
        max_row_id_loc_0_reg_300 <= max_row_id;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln80_fu_620_p2 == 1'd0))) begin
        max_row_id_loc_1_reg_336 <= max_row_id_loc_0_reg_300;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln80_reg_885 == 1'd1))) begin
        max_row_id_loc_1_reg_336 <= add_ln92_fu_652_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln80_fu_620_p2 == 1'd0))) begin
        max_row_id_new_1_reg_324 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln80_reg_885 == 1'd1))) begin
        max_row_id_new_1_reg_324 <= add_ln92_fu_652_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln80_1_fu_668_p2 == 1'd0))) begin
        max_row_id_new_2_reg_358 <= ap_phi_mux_max_row_id_new_1_phi_fu_328_p4;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln80_1_reg_897 == 1'd1))) begin
        max_row_id_new_2_reg_358 <= add_ln92_1_fu_711_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln29_fu_508_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_444_p2 == 1'd0))) begin
        slot_counter_0 <= 32'd0;
    end else if (((grp_fu_410_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        slot_counter_0 <= add_ln59_fu_573_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln29_fu_508_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_444_p2 == 1'd0))) begin
        slot_counter_1 <= 32'd0;
    end else if (((grp_fu_410_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        slot_counter_1 <= add_ln59_1_fu_604_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (cmd_start_read_read_fu_106_p2 == 1'd1))) begin
        slot_id_reg_275 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        slot_id_reg_275 <= add_ln25_reg_840;
    end
end

always @ (posedge ap_clk) begin
    if ((((trunc_ln29_fu_508_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_444_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln80_fu_620_p2 == 1'd1)))) begin
        slot_res_arr_0 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        slot_res_arr_0 <= reg_430;
    end
end

always @ (posedge ap_clk) begin
    if ((((trunc_ln29_fu_508_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_444_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln80_1_fu_668_p2 == 1'd1)))) begin
        slot_res_arr_1 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        slot_res_arr_1 <= reg_430;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln29_fu_508_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_444_p2 == 1'd0))) begin
        slot_row_counter_0 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        slot_row_counter_0 <= add_ln115_fu_717_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln29_fu_508_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_444_p2 == 1'd0))) begin
        slot_row_counter_1 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        slot_row_counter_1 <= add_ln115_1_fu_738_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln29_fu_508_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_444_p2 == 1'd0))) begin
        slot_row_id_0 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln80_fu_620_p2 == 1'd1))) begin
        slot_row_id_0 <= trunc_ln53_reg_866;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln29_fu_508_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_444_p2 == 1'd0))) begin
        slot_row_id_1 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln80_1_fu_668_p2 == 1'd1))) begin
        slot_row_id_1 <= trunc_ln80_fu_660_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln29_fu_508_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_444_p2 == 1'd0))) begin
        slot_row_len_id_0 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln80_fu_620_p2 == 1'd1))) begin
        slot_row_len_id_0 <= add_ln87_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln29_fu_508_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_444_p2 == 1'd0))) begin
        slot_row_len_id_1 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln80_1_fu_668_p2 == 1'd1))) begin
        slot_row_len_id_1 <= add_ln87_1_fu_693_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln25_reg_840 <= add_ln25_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        icmp_ln80_1_reg_897 <= icmp_ln80_1_fu_668_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln80_reg_885 <= icmp_ln80_fu_620_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_max_row_id_flag_2_phi_fu_382_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        max_row_id <= max_row_id_new_2_reg_358;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        mul_1_i_reg_974 <= grp_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        mul_i_reg_966 <= grp_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_426 <= inp_vec_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_430 <= grp_fu_390_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_444_p2 == 1'd0))) begin
        row_len_slot_arr_addr_6_reg_848[2] <= tmp_2_fu_484_p3[2];
        row_len_slot_arr_addr_7_reg_853[2] <= tmp_3_fu_499_p3[2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        trunc_ln107_1_reg_936 <= trunc_ln107_1_fu_750_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        trunc_ln107_reg_921 <= trunc_ln107_fu_729_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        trunc_ln53_reg_866 <= trunc_ln53_fu_560_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln80_reg_885 == 1'd1))) begin
        ap_phi_mux_max_row_id_flag_1_phi_fu_315_p4 = 1'd1;
    end else begin
        ap_phi_mux_max_row_id_flag_1_phi_fu_315_p4 = max_row_id_flag_1_reg_312;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln80_reg_885 == 1'd1))) begin
        ap_phi_mux_max_row_id_loc_1_phi_fu_339_p4 = add_ln92_fu_652_p2;
    end else begin
        ap_phi_mux_max_row_id_loc_1_phi_fu_339_p4 = max_row_id_loc_1_reg_336;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln80_reg_885 == 1'd1))) begin
        ap_phi_mux_max_row_id_new_1_phi_fu_328_p4 = add_ln92_fu_652_p2;
    end else begin
        ap_phi_mux_max_row_id_new_1_phi_fu_328_p4 = max_row_id_new_1_reg_324;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_390_p0 = slot_res_arr_1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_390_p0 = slot_res_arr_0;
    end else begin
        grp_fu_390_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_390_p1 = mul_1_i_reg_974;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_390_p1 = mul_i_reg_966;
    end else begin
        grp_fu_390_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_394_p0 = matrix_val_1_fu_768_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_394_p0 = matrix_val_fu_759_p1;
    end else begin
        grp_fu_394_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_394_p1 = bitcast_ln111_1_fu_772_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_394_p1 = bitcast_ln111_fu_763_p1;
    end else begin
        grp_fu_394_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        inp_vec_address0 = zext_ln111_1_fu_754_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        inp_vec_address0 = zext_ln111_fu_733_p1;
    end else begin
        inp_vec_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        inp_vec_ce0 = 1'b1;
    end else begin
        inp_vec_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        output_vec_address0 = zext_ln131_1_fu_817_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        output_vec_address0 = zext_ln131_fu_797_p1;
    end else begin
        output_vec_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20))) begin
        output_vec_ce0 = 1'b1;
    end else begin
        output_vec_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        output_vec_d0 = bitcast_ln131_1_fu_822_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        output_vec_d0 = bitcast_ln131_fu_802_p1;
    end else begin
        output_vec_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20))) begin
        output_vec_we0 = 1'b1;
    end else begin
        output_vec_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        row_len_slot_arr_address0 = zext_ln86_fu_630_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        row_len_slot_arr_address0 = zext_ln58_fu_568_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        row_len_slot_arr_address0 = row_len_slot_arr_addr_7_reg_853;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        row_len_slot_arr_address0 = tmp_1_fu_469_p3;
    end else begin
        row_len_slot_arr_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        row_len_slot_arr_address1 = zext_ln86_1_fu_688_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        row_len_slot_arr_address1 = zext_ln58_1_fu_599_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        row_len_slot_arr_address1 = row_len_slot_arr_addr_6_reg_848;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        row_len_slot_arr_address1 = zext_ln37_fu_458_p1;
    end else begin
        row_len_slot_arr_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        row_len_slot_arr_ce0 = 1'b1;
    end else begin
        row_len_slot_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2))) begin
        row_len_slot_arr_ce1 = 1'b1;
    end else begin
        row_len_slot_arr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        row_len_slot_arr_d0 = slot_arr_row_len_q0;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        row_len_slot_arr_d0 = 32'd0;
    end else begin
        row_len_slot_arr_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        row_len_slot_arr_d1 = slot_arr_row_len_q0;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        row_len_slot_arr_d1 = 32'd0;
    end else begin
        row_len_slot_arr_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((grp_fu_410_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_444_p2 == 1'd0)))) begin
        row_len_slot_arr_we0 = 1'b1;
    end else begin
        row_len_slot_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((grp_fu_410_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_444_p2 == 1'd0)))) begin
        row_len_slot_arr_we1 = 1'b1;
    end else begin
        row_len_slot_arr_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        slot_arr_row_len_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        slot_arr_row_len_address0 = 64'd0;
    end else begin
        slot_arr_row_len_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        slot_arr_row_len_ce0 = 1'b1;
    end else begin
        slot_arr_row_len_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        slot_data_arr_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        slot_data_arr_address0 = 64'd0;
    end else begin
        slot_data_arr_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        slot_data_arr_ce0 = 1'b1;
    end else begin
        slot_data_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (cmd_start_read_read_fu_106_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (cmd_start_read_read_fu_106_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_444_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln115_1_fu_738_p2 = ($signed(empty_16_reg_369) + $signed(32'd4294967295));

assign add_ln115_fu_717_p2 = ($signed(empty_15_reg_347) + $signed(32'd4294967295));

assign add_ln25_fu_438_p2 = (slot_id_reg_275 + 2'd1);

assign add_ln59_1_fu_604_p2 = (slot_counter_1 + 32'd1);

assign add_ln59_fu_573_p2 = (slot_counter_0 + 32'd1);

assign add_ln87_1_fu_693_p2 = (slot_row_len_id_1 + 32'd1);

assign add_ln87_fu_635_p2 = (slot_row_len_id_0 + 32'd1);

assign add_ln92_1_fu_711_p2 = (max_row_id_loc_1_reg_336 + 32'd1);

assign add_ln92_fu_652_p2 = (max_row_id_loc_0_reg_300 + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_phi_mux_max_row_id_flag_2_phi_fu_382_p4 = max_row_id_flag_2_reg_378;

assign bitcast_ln111_1_fu_772_p1 = reg_426;

assign bitcast_ln111_fu_763_p1 = reg_426;

assign bitcast_ln131_1_fu_822_p1 = reg_430;

assign bitcast_ln131_fu_802_p1 = reg_430;

assign cmd_start_read_read_fu_106_p2 = cmd_start;

assign grp_fu_410_p2 = ((slot_arr_row_len_q0 == 32'd4294967295) ? 1'b1 : 1'b0);

assign grp_fu_416_p4 = {{slot_data_arr_q0[34:32]}};

assign icmp_ln25_fu_444_p2 = ((slot_id_reg_275 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln80_1_fu_668_p2 = ((slot_row_counter_1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_620_p2 = ((slot_row_counter_0 == 32'd0) ? 1'b1 : 1'b0);

assign matrix_val_1_fu_768_p1 = trunc_ln107_1_reg_936;

assign matrix_val_fu_759_p1 = trunc_ln107_reg_921;

assign or_ln37_1_fu_478_p2 = (tmp_fu_450_p3 | 4'd2);

assign or_ln37_2_fu_493_p2 = (tmp_fu_450_p3 | 4'd3);

assign or_ln37_fu_463_p2 = (tmp_fu_450_p3 | 4'd1);

assign tmp_1_fu_469_p3 = {{60'd0}, {or_ln37_fu_463_p2}};

assign tmp_2_fu_484_p3 = {{60'd0}, {or_ln37_1_fu_478_p2}};

assign tmp_3_fu_499_p3 = {{60'd0}, {or_ln37_2_fu_493_p2}};

assign tmp_fu_450_p3 = {{slot_id_reg_275}, {2'd0}};

assign trunc_ln107_1_fu_750_p1 = slot_data_arr_q0[31:0];

assign trunc_ln107_fu_729_p1 = slot_data_arr_q0[31:0];

assign trunc_ln29_fu_508_p1 = slot_id_reg_275[0:0];

assign trunc_ln53_fu_560_p1 = max_row_id_loc_0_reg_300[2:0];

assign trunc_ln58_fu_589_p1 = slot_counter_1[2:0];

assign trunc_ln80_fu_660_p1 = ap_phi_mux_max_row_id_loc_1_phi_fu_339_p4[2:0];

assign trunc_ln86_fu_678_p1 = slot_row_len_id_1[2:0];

assign xor_ln58_fu_593_p2 = (trunc_ln58_fu_589_p1 ^ 3'd4);

assign xor_ln86_fu_682_p2 = (trunc_ln86_fu_678_p1 ^ 3'd4);

assign zext_ln111_1_fu_754_p1 = grp_fu_416_p4;

assign zext_ln111_fu_733_p1 = grp_fu_416_p4;

assign zext_ln131_1_fu_817_p1 = slot_row_id_1;

assign zext_ln131_fu_797_p1 = slot_row_id_0;

assign zext_ln37_fu_458_p1 = tmp_fu_450_p3;

assign zext_ln58_1_fu_599_p1 = xor_ln58_fu_593_p2;

assign zext_ln58_fu_568_p1 = slot_counter_0;

assign zext_ln86_1_fu_688_p1 = xor_ln86_fu_682_p2;

assign zext_ln86_fu_630_p1 = slot_row_len_id_0;

always @ (posedge ap_clk) begin
    row_len_slot_arr_addr_6_reg_848[1:0] <= 2'b10;
    row_len_slot_arr_addr_7_reg_853[1:0] <= 2'b11;
end

endmodule //HLS_CISR_spmv_accel
