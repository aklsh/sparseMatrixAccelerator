-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HLS_CISR_spmv_accel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cmd_start : IN STD_LOGIC_VECTOR (0 downto 0);
    inp_vec_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    inp_vec_ce0 : OUT STD_LOGIC;
    inp_vec_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    slot_data_arr_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    slot_data_arr_ce0 : OUT STD_LOGIC;
    slot_data_arr_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    slot_arr_row_len_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    slot_arr_row_len_ce0 : OUT STD_LOGIC;
    slot_arr_row_len_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_vec_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_vec_ce0 : OUT STD_LOGIC;
    output_vec_we0 : OUT STD_LOGIC;
    output_vec_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of HLS_CISR_spmv_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "HLS_CISR_spmv_accel_HLS_CISR_spmv_accel,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=21,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1125,HLS_SYN_LUT=1634,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal max_row_id : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal row_len_slot_arr_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_len_slot_arr_ce0 : STD_LOGIC;
    signal row_len_slot_arr_we0 : STD_LOGIC;
    signal row_len_slot_arr_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_len_slot_arr_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_len_slot_arr_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_len_slot_arr_ce1 : STD_LOGIC;
    signal row_len_slot_arr_we1 : STD_LOGIC;
    signal row_len_slot_arr_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_len_slot_arr_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slot_counter_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_counter_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_counter_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_res_arr_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_len_id_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_id_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal slot_row_counter_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_res_arr_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_len_id_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slot_row_id_1 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal cmd_start_read_read_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_fu_438_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln25_reg_840 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal row_len_slot_arr_addr_6_reg_848 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln25_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_len_slot_arr_addr_7_reg_853 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln53_fu_560_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln53_reg_866 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln80_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_885 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln80_1_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_1_reg_897 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln92_1_fu_711_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln107_fu_729_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln107_reg_921 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln107_1_fu_750_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln107_1_reg_936 : STD_LOGIC_VECTOR (31 downto 0);
    signal matrix_val_fu_759_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln111_fu_763_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matrix_val_1_fu_768_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal bitcast_ln111_1_fu_772_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_reg_966 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal mul_1_i_reg_974 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal slot_id_reg_275 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal max_row_id_flag_0_reg_286 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_row_id_loc_0_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_max_row_id_flag_1_phi_fu_315_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_row_id_flag_1_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln92_fu_652_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_max_row_id_new_1_phi_fu_328_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_row_id_new_1_reg_324 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_max_row_id_loc_1_phi_fu_339_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_row_id_loc_1_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_15_reg_347 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_row_id_new_2_reg_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_16_reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_max_row_id_flag_2_phi_fu_382_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_row_id_flag_2_reg_378 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln37_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_469_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_484_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_499_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln58_1_fu_599_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln86_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln86_1_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln111_fu_733_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln111_1_fu_754_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln131_fu_797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln131_1_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal add_ln59_fu_573_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln29_fu_508_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln59_1_fu_604_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln115_fu_717_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln87_fu_635_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln115_1_fu_738_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln87_1_fu_693_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln80_fu_660_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal bitcast_ln131_fu_802_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln131_1_fu_822_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_390_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_390_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_394_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_450_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln37_fu_463_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln37_1_fu_478_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln37_2_fu_493_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln58_fu_589_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln58_fu_593_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln86_fu_678_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln86_fu_682_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_416_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component HLS_CISR_spmv_accel_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HLS_CISR_spmv_accel_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HLS_CISR_spmv_accel_row_len_slot_arr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    row_len_slot_arr_U : component HLS_CISR_spmv_accel_row_len_slot_arr
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row_len_slot_arr_address0,
        ce0 => row_len_slot_arr_ce0,
        we0 => row_len_slot_arr_we0,
        d0 => row_len_slot_arr_d0,
        q0 => row_len_slot_arr_q0,
        address1 => row_len_slot_arr_address1,
        ce1 => row_len_slot_arr_ce1,
        we1 => row_len_slot_arr_we1,
        d1 => row_len_slot_arr_d1,
        q1 => row_len_slot_arr_q1);

    fadd_32ns_32ns_32_5_full_dsp_1_U1 : component HLS_CISR_spmv_accel_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_390_p0,
        din1 => grp_fu_390_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_390_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U2 : component HLS_CISR_spmv_accel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_394_p0,
        din1 => grp_fu_394_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_394_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    empty_15_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln80_fu_620_p2 = ap_const_lv1_0))) then 
                empty_15_reg_347 <= slot_row_counter_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln80_reg_885 = ap_const_lv1_1))) then 
                empty_15_reg_347 <= row_len_slot_arr_q0;
            end if; 
        end if;
    end process;

    empty_16_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln80_1_fu_668_p2 = ap_const_lv1_0))) then 
                empty_16_reg_369 <= slot_row_counter_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln80_1_reg_897 = ap_const_lv1_1))) then 
                empty_16_reg_369 <= row_len_slot_arr_q1;
            end if; 
        end if;
    end process;

    max_row_id_flag_0_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (cmd_start_read_read_fu_106_p2 = ap_const_lv1_1))) then 
                max_row_id_flag_0_reg_286 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (cmd_start_read_read_fu_106_p2 = ap_const_lv1_0))) then 
                max_row_id_flag_0_reg_286 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    max_row_id_flag_1_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln80_fu_620_p2 = ap_const_lv1_0))) then 
                max_row_id_flag_1_reg_312 <= max_row_id_flag_0_reg_286;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln80_reg_885 = ap_const_lv1_1))) then 
                max_row_id_flag_1_reg_312 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    max_row_id_flag_2_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln80_1_fu_668_p2 = ap_const_lv1_0))) then 
                max_row_id_flag_2_reg_378 <= ap_phi_mux_max_row_id_flag_1_phi_fu_315_p4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln80_1_reg_897 = ap_const_lv1_1))) then 
                max_row_id_flag_2_reg_378 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    max_row_id_loc_0_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (cmd_start_read_read_fu_106_p2 = ap_const_lv1_1))) then 
                max_row_id_loc_0_reg_300 <= ap_const_lv32_0;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (cmd_start_read_read_fu_106_p2 = ap_const_lv1_0))) then 
                max_row_id_loc_0_reg_300 <= max_row_id;
            end if; 
        end if;
    end process;

    max_row_id_loc_1_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln80_fu_620_p2 = ap_const_lv1_0))) then 
                max_row_id_loc_1_reg_336 <= max_row_id_loc_0_reg_300;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln80_reg_885 = ap_const_lv1_1))) then 
                max_row_id_loc_1_reg_336 <= add_ln92_fu_652_p2;
            end if; 
        end if;
    end process;

    max_row_id_new_1_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln80_fu_620_p2 = ap_const_lv1_0))) then 
                max_row_id_new_1_reg_324 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln80_reg_885 = ap_const_lv1_1))) then 
                max_row_id_new_1_reg_324 <= add_ln92_fu_652_p2;
            end if; 
        end if;
    end process;

    max_row_id_new_2_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln80_1_fu_668_p2 = ap_const_lv1_0))) then 
                max_row_id_new_2_reg_358 <= ap_phi_mux_max_row_id_new_1_phi_fu_328_p4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln80_1_reg_897 = ap_const_lv1_1))) then 
                max_row_id_new_2_reg_358 <= add_ln92_1_fu_711_p2;
            end if; 
        end if;
    end process;

    slot_counter_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_508_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_444_p2 = ap_const_lv1_0))) then 
                slot_counter_0 <= ap_const_lv32_0;
            elsif (((grp_fu_410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                slot_counter_0 <= add_ln59_fu_573_p2;
            end if; 
        end if;
    end process;

    slot_counter_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_508_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_444_p2 = ap_const_lv1_0))) then 
                slot_counter_1 <= ap_const_lv32_0;
            elsif (((grp_fu_410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                slot_counter_1 <= add_ln59_1_fu_604_p2;
            end if; 
        end if;
    end process;

    slot_id_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (cmd_start_read_read_fu_106_p2 = ap_const_lv1_1))) then 
                slot_id_reg_275 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                slot_id_reg_275 <= add_ln25_reg_840;
            end if; 
        end if;
    end process;

    slot_res_arr_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((trunc_ln29_fu_508_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_444_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln80_fu_620_p2 = ap_const_lv1_1)))) then 
                slot_res_arr_0 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                slot_res_arr_0 <= reg_430;
            end if; 
        end if;
    end process;

    slot_res_arr_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((trunc_ln29_fu_508_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_444_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln80_1_fu_668_p2 = ap_const_lv1_1)))) then 
                slot_res_arr_1 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                slot_res_arr_1 <= reg_430;
            end if; 
        end if;
    end process;

    slot_row_counter_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_508_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_444_p2 = ap_const_lv1_0))) then 
                slot_row_counter_0 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                slot_row_counter_0 <= add_ln115_fu_717_p2;
            end if; 
        end if;
    end process;

    slot_row_counter_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_508_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_444_p2 = ap_const_lv1_0))) then 
                slot_row_counter_1 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                slot_row_counter_1 <= add_ln115_1_fu_738_p2;
            end if; 
        end if;
    end process;

    slot_row_id_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_508_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_444_p2 = ap_const_lv1_0))) then 
                slot_row_id_0 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln80_fu_620_p2 = ap_const_lv1_1))) then 
                slot_row_id_0 <= trunc_ln53_reg_866;
            end if; 
        end if;
    end process;

    slot_row_id_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_508_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_444_p2 = ap_const_lv1_0))) then 
                slot_row_id_1 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln80_1_fu_668_p2 = ap_const_lv1_1))) then 
                slot_row_id_1 <= trunc_ln80_fu_660_p1;
            end if; 
        end if;
    end process;

    slot_row_len_id_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_508_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_444_p2 = ap_const_lv1_0))) then 
                slot_row_len_id_0 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln80_fu_620_p2 = ap_const_lv1_1))) then 
                slot_row_len_id_0 <= add_ln87_fu_635_p2;
            end if; 
        end if;
    end process;

    slot_row_len_id_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln29_fu_508_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_444_p2 = ap_const_lv1_0))) then 
                slot_row_len_id_1 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln80_1_fu_668_p2 = ap_const_lv1_1))) then 
                slot_row_len_id_1 <= add_ln87_1_fu_693_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln25_reg_840 <= add_ln25_fu_438_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln80_1_reg_897 <= icmp_ln80_1_fu_668_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln80_reg_885 <= icmp_ln80_fu_620_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_max_row_id_flag_2_phi_fu_382_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                max_row_id <= max_row_id_new_2_reg_358;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                mul_1_i_reg_974 <= grp_fu_394_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                mul_i_reg_966 <= grp_fu_394_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_426 <= inp_vec_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then
                reg_430 <= grp_fu_390_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_444_p2 = ap_const_lv1_0))) then
                    row_len_slot_arr_addr_6_reg_848(2) <= tmp_2_fu_484_p3(3 - 1 downto 0)(2);
                    row_len_slot_arr_addr_7_reg_853(2) <= tmp_3_fu_499_p3(3 - 1 downto 0)(2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                trunc_ln107_1_reg_936 <= trunc_ln107_1_fu_750_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                trunc_ln107_reg_921 <= trunc_ln107_fu_729_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                trunc_ln53_reg_866 <= trunc_ln53_fu_560_p1;
            end if;
        end if;
    end process;
    row_len_slot_arr_addr_6_reg_848(1 downto 0) <= "10";
    row_len_slot_arr_addr_7_reg_853(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, cmd_start_read_read_fu_106_p2, ap_CS_fsm_state2, icmp_ln25_fu_444_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (cmd_start_read_read_fu_106_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (cmd_start_read_read_fu_106_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_444_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln115_1_fu_738_p2 <= std_logic_vector(unsigned(empty_16_reg_369) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln115_fu_717_p2 <= std_logic_vector(unsigned(empty_15_reg_347) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln25_fu_438_p2 <= std_logic_vector(unsigned(slot_id_reg_275) + unsigned(ap_const_lv2_1));
    add_ln59_1_fu_604_p2 <= std_logic_vector(unsigned(slot_counter_1) + unsigned(ap_const_lv32_1));
    add_ln59_fu_573_p2 <= std_logic_vector(unsigned(slot_counter_0) + unsigned(ap_const_lv32_1));
    add_ln87_1_fu_693_p2 <= std_logic_vector(unsigned(slot_row_len_id_1) + unsigned(ap_const_lv32_1));
    add_ln87_fu_635_p2 <= std_logic_vector(unsigned(slot_row_len_id_0) + unsigned(ap_const_lv32_1));
    add_ln92_1_fu_711_p2 <= std_logic_vector(unsigned(max_row_id_loc_1_reg_336) + unsigned(ap_const_lv32_1));
    add_ln92_fu_652_p2 <= std_logic_vector(unsigned(max_row_id_loc_0_reg_300) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_max_row_id_flag_1_phi_fu_315_p4_assign_proc : process(icmp_ln80_reg_885, ap_CS_fsm_state7, max_row_id_flag_1_reg_312)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln80_reg_885 = ap_const_lv1_1))) then 
            ap_phi_mux_max_row_id_flag_1_phi_fu_315_p4 <= ap_const_lv1_1;
        else 
            ap_phi_mux_max_row_id_flag_1_phi_fu_315_p4 <= max_row_id_flag_1_reg_312;
        end if; 
    end process;

    ap_phi_mux_max_row_id_flag_2_phi_fu_382_p4 <= max_row_id_flag_2_reg_378;

    ap_phi_mux_max_row_id_loc_1_phi_fu_339_p4_assign_proc : process(icmp_ln80_reg_885, ap_CS_fsm_state7, add_ln92_fu_652_p2, max_row_id_loc_1_reg_336)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln80_reg_885 = ap_const_lv1_1))) then 
            ap_phi_mux_max_row_id_loc_1_phi_fu_339_p4 <= add_ln92_fu_652_p2;
        else 
            ap_phi_mux_max_row_id_loc_1_phi_fu_339_p4 <= max_row_id_loc_1_reg_336;
        end if; 
    end process;


    ap_phi_mux_max_row_id_new_1_phi_fu_328_p4_assign_proc : process(icmp_ln80_reg_885, ap_CS_fsm_state7, add_ln92_fu_652_p2, max_row_id_new_1_reg_324)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln80_reg_885 = ap_const_lv1_1))) then 
            ap_phi_mux_max_row_id_new_1_phi_fu_328_p4 <= add_ln92_fu_652_p2;
        else 
            ap_phi_mux_max_row_id_new_1_phi_fu_328_p4 <= max_row_id_new_1_reg_324;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln111_1_fu_772_p1 <= reg_426;
    bitcast_ln111_fu_763_p1 <= reg_426;
    bitcast_ln131_1_fu_822_p1 <= reg_430;
    bitcast_ln131_fu_802_p1 <= reg_430;
    cmd_start_read_read_fu_106_p2 <= cmd_start;

    grp_fu_390_p0_assign_proc : process(slot_res_arr_0, slot_res_arr_1, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_390_p0 <= slot_res_arr_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_390_p0 <= slot_res_arr_0;
        else 
            grp_fu_390_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_390_p1_assign_proc : process(mul_i_reg_966, mul_1_i_reg_974, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_390_p1 <= mul_1_i_reg_974;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_390_p1 <= mul_i_reg_966;
        else 
            grp_fu_390_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_394_p0_assign_proc : process(ap_CS_fsm_state11, matrix_val_fu_759_p1, matrix_val_1_fu_768_p1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_394_p0 <= matrix_val_1_fu_768_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_394_p0 <= matrix_val_fu_759_p1;
        else 
            grp_fu_394_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_394_p1_assign_proc : process(ap_CS_fsm_state11, bitcast_ln111_fu_763_p1, ap_CS_fsm_state12, bitcast_ln111_1_fu_772_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_394_p1 <= bitcast_ln111_1_fu_772_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_394_p1 <= bitcast_ln111_fu_763_p1;
        else 
            grp_fu_394_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_410_p2 <= "1" when (slot_arr_row_len_q0 = ap_const_lv32_FFFFFFFF) else "0";
    grp_fu_416_p4 <= slot_data_arr_q0(34 downto 32);
    icmp_ln25_fu_444_p2 <= "1" when (slot_id_reg_275 = ap_const_lv2_2) else "0";
    icmp_ln80_1_fu_668_p2 <= "1" when (slot_row_counter_1 = ap_const_lv32_0) else "0";
    icmp_ln80_fu_620_p2 <= "1" when (slot_row_counter_0 = ap_const_lv32_0) else "0";

    inp_vec_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state9, zext_ln111_fu_733_p1, zext_ln111_1_fu_754_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            inp_vec_address0 <= zext_ln111_1_fu_754_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            inp_vec_address0 <= zext_ln111_fu_733_p1(3 - 1 downto 0);
        else 
            inp_vec_address0 <= "XXX";
        end if; 
    end process;


    inp_vec_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            inp_vec_ce0 <= ap_const_logic_1;
        else 
            inp_vec_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    matrix_val_1_fu_768_p1 <= trunc_ln107_1_reg_936;
    matrix_val_fu_759_p1 <= trunc_ln107_reg_921;
    or_ln37_1_fu_478_p2 <= (tmp_fu_450_p3 or ap_const_lv4_2);
    or_ln37_2_fu_493_p2 <= (tmp_fu_450_p3 or ap_const_lv4_3);
    or_ln37_fu_463_p2 <= (tmp_fu_450_p3 or ap_const_lv4_1);

    output_vec_address0_assign_proc : process(ap_CS_fsm_state20, zext_ln131_fu_797_p1, zext_ln131_1_fu_817_p1, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_vec_address0 <= zext_ln131_1_fu_817_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_vec_address0 <= zext_ln131_fu_797_p1(3 - 1 downto 0);
        else 
            output_vec_address0 <= "XXX";
        end if; 
    end process;


    output_vec_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            output_vec_ce0 <= ap_const_logic_1;
        else 
            output_vec_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_vec_d0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, bitcast_ln131_fu_802_p1, bitcast_ln131_1_fu_822_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_vec_d0 <= bitcast_ln131_1_fu_822_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_vec_d0 <= bitcast_ln131_fu_802_p1;
        else 
            output_vec_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_vec_we0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            output_vec_we0 <= ap_const_logic_1;
        else 
            output_vec_we0 <= ap_const_logic_0;
        end if; 
    end process;


    row_len_slot_arr_address0_assign_proc : process(ap_CS_fsm_state2, row_len_slot_arr_addr_7_reg_853, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, tmp_1_fu_469_p3, zext_ln58_fu_568_p1, zext_ln86_fu_630_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            row_len_slot_arr_address0 <= zext_ln86_fu_630_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            row_len_slot_arr_address0 <= zext_ln58_fu_568_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_len_slot_arr_address0 <= row_len_slot_arr_addr_7_reg_853;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            row_len_slot_arr_address0 <= tmp_1_fu_469_p3(3 - 1 downto 0);
        else 
            row_len_slot_arr_address0 <= "XXX";
        end if; 
    end process;


    row_len_slot_arr_address1_assign_proc : process(ap_CS_fsm_state2, row_len_slot_arr_addr_6_reg_848, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state3, zext_ln37_fu_458_p1, zext_ln58_1_fu_599_p1, zext_ln86_1_fu_688_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            row_len_slot_arr_address1 <= zext_ln86_1_fu_688_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            row_len_slot_arr_address1 <= zext_ln58_1_fu_599_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_len_slot_arr_address1 <= row_len_slot_arr_addr_6_reg_848;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            row_len_slot_arr_address1 <= zext_ln37_fu_458_p1(3 - 1 downto 0);
        else 
            row_len_slot_arr_address1 <= "XXX";
        end if; 
    end process;


    row_len_slot_arr_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            row_len_slot_arr_ce0 <= ap_const_logic_1;
        else 
            row_len_slot_arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_len_slot_arr_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            row_len_slot_arr_ce1 <= ap_const_logic_1;
        else 
            row_len_slot_arr_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    row_len_slot_arr_d0_assign_proc : process(slot_arr_row_len_q0, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            row_len_slot_arr_d0 <= slot_arr_row_len_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            row_len_slot_arr_d0 <= ap_const_lv32_0;
        else 
            row_len_slot_arr_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    row_len_slot_arr_d1_assign_proc : process(slot_arr_row_len_q0, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            row_len_slot_arr_d1 <= slot_arr_row_len_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            row_len_slot_arr_d1 <= ap_const_lv32_0;
        else 
            row_len_slot_arr_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    row_len_slot_arr_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln25_fu_444_p2, ap_CS_fsm_state5, ap_CS_fsm_state3, grp_fu_410_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((grp_fu_410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_444_p2 = ap_const_lv1_0)))) then 
            row_len_slot_arr_we0 <= ap_const_logic_1;
        else 
            row_len_slot_arr_we0 <= ap_const_logic_0;
        end if; 
    end process;


    row_len_slot_arr_we1_assign_proc : process(ap_CS_fsm_state2, icmp_ln25_fu_444_p2, ap_CS_fsm_state6, ap_CS_fsm_state3, grp_fu_410_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((grp_fu_410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_444_p2 = ap_const_lv1_0)))) then 
            row_len_slot_arr_we1 <= ap_const_logic_1;
        else 
            row_len_slot_arr_we1 <= ap_const_logic_0;
        end if; 
    end process;


    slot_arr_row_len_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            slot_arr_row_len_address0 <= ap_const_lv64_1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            slot_arr_row_len_address0 <= ap_const_lv64_0(1 - 1 downto 0);
        else 
            slot_arr_row_len_address0 <= "X";
        end if; 
    end process;


    slot_arr_row_len_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            slot_arr_row_len_ce0 <= ap_const_logic_1;
        else 
            slot_arr_row_len_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    slot_data_arr_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            slot_data_arr_address0 <= ap_const_lv64_1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            slot_data_arr_address0 <= ap_const_lv64_0(1 - 1 downto 0);
        else 
            slot_data_arr_address0 <= "X";
        end if; 
    end process;


    slot_data_arr_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            slot_data_arr_ce0 <= ap_const_logic_1;
        else 
            slot_data_arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_469_p3 <= (ap_const_lv60_0 & or_ln37_fu_463_p2);
    tmp_2_fu_484_p3 <= (ap_const_lv60_0 & or_ln37_1_fu_478_p2);
    tmp_3_fu_499_p3 <= (ap_const_lv60_0 & or_ln37_2_fu_493_p2);
    tmp_fu_450_p3 <= (slot_id_reg_275 & ap_const_lv2_0);
    trunc_ln107_1_fu_750_p1 <= slot_data_arr_q0(32 - 1 downto 0);
    trunc_ln107_fu_729_p1 <= slot_data_arr_q0(32 - 1 downto 0);
    trunc_ln29_fu_508_p1 <= slot_id_reg_275(1 - 1 downto 0);
    trunc_ln53_fu_560_p1 <= max_row_id_loc_0_reg_300(3 - 1 downto 0);
    trunc_ln58_fu_589_p1 <= slot_counter_1(3 - 1 downto 0);
    trunc_ln80_fu_660_p1 <= ap_phi_mux_max_row_id_loc_1_phi_fu_339_p4(3 - 1 downto 0);
    trunc_ln86_fu_678_p1 <= slot_row_len_id_1(3 - 1 downto 0);
    xor_ln58_fu_593_p2 <= (trunc_ln58_fu_589_p1 xor ap_const_lv3_4);
    xor_ln86_fu_682_p2 <= (trunc_ln86_fu_678_p1 xor ap_const_lv3_4);
    zext_ln111_1_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_416_p4),64));
    zext_ln111_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_416_p4),64));
    zext_ln131_1_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(slot_row_id_1),64));
    zext_ln131_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(slot_row_id_0),64));
    zext_ln37_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_450_p3),64));
    zext_ln58_1_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln58_fu_593_p2),64));
    zext_ln58_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(slot_counter_0),64));
    zext_ln86_1_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln86_fu_682_p2),64));
    zext_ln86_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(slot_row_len_id_0),64));
end behav;
